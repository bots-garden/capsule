version: '3'

description: >
  # Integration tests of the FaaS mode of Capsule

  ## Build all hello functions

  ```bash
  task build:hello-functions
  ```
  ## Publish all hello functions to a GitLab registry

  > requirement: you have to build the functionns first
  ```bash
  task publish:hello-functions
  ```

includes:
  build: ./BuildTasks.yml
  publish: ./PublishTasks.yml
  start: ./StartTasks.yml
  call: ./CallTasks.yml
  drop: ./DropTasks.yml
  duplicate: ./DuplicateTasks.yml
  stress: ./StressTasks.yml

tasks:
  
  build-html-page:
    cmds:
    - |
      cd functions/html-page
      tinygo build -o html-page.wasm \
        -scheduler=none \
        --no-debug \
        -target wasi ./main.go 
      ls -lh *.wasm
      mv html-page.wasm ../..  

  build-index-page:
    description: >
      In "FaaS mode", if an `index.page.wasm` file exists
      Capsule will serve it with the "/" route
      Otherwise, Capsule will return a simple message with its version number
    cmds:
    - |
      cd functions/index-page
      tinygo build -o index.page.wasm \
        -scheduler=none \
        --no-debug \
        -target wasi ./main.go 
      ls -lh *.wasm
      mv index.page.wasm ../..

  # Start main capsule process
  start-capsule-http-with-file:
    description: >
      Start Capsule HTTP (in Faas mode) with an wasm module.
      Capsule will load and serve this wasm module,
      but in the same process. It means that if you want to update the `index.page.wasm` module,
      you will need to stop and start again the Capsule HTTP process.

      There is another solution:
      - start the capsule http without any file
      - start a function name `index.page` (as any other function)
      Then, you will be able to redeploy a version of `index.page`

      See these task: `start-capsule-http` and `start-index`
    env:
      HTTP_PORT: '8080'
      #WASM_FILE: './functions/index-page/index.page.wasm'
      WASM_FILE: './html-page.wasm'
      CAPSULE_FAAS_TOKEN: "ILOVEPANDAS"
    cmds:
      - | # use --faas=true to activate the faas mode of Capsule HTTP
        #capsule-http --wasm=${WASM_FILE} --httpPort=${HTTP_PORT} --faas=true
        ./capsule-http --wasm=${WASM_FILE} --httpPort=${HTTP_PORT} --faas=true
        # you can use http://capsule-ide.local:8080/

  start-capsule-http:
    description: >
      Start Capsule HTTP (in Faas mode) without specifying a wasm module.
      Then, with the "/" route, Capsule HTTP will serve the `index.page` function 
      when it will be available.
    env:
      HTTP_PORT: '8080'
      CAPSULE_FAAS_TOKEN: "ILOVEPANDAS"
    cmds:
      - | # use --faas=true to activate the faas mode of Capsule HTTP
        ./capsule-http --httpPort=${HTTP_PORT} --faas=true
        # you can use http://capsule-ide.local:8080/

  start-index:
    description: >
      Start the `index.page` function
    env:
      CAPSULE_FAAS_TOKEN: "ILOVEPANDAS"
      #CAPSULE_MAIN_PROCESS_URL: "http://capsule-ide.local:8080"
    cmds:
    - |
      ./capsctl \
          --cmd=start \
          --name=index.page \
          --revision=default \
          --wasm=./index.page.wasm

  # this curl command does not work
  processes-list:
    env:
      HTTP_PORT: '8080'
      DOMAIN: 'localhost'
      PROTOCOL: 'http'
    cmds:
      - | 
        curl -X GET ${PROTOCOL}://${DOMAIN}:${HTTP_PORT}/functions/processes


  todo: >
    - redeploy of index

