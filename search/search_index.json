{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsule Project: the nano wasm runners","text":"<p>What's new?</p> <p><code>v0.4.2 \u26f1\ufe0f [beach umbrella]</code>: </p> <ul> <li>Update with the last version of Wazero v1.4.0.</li> <li>Capsule HTTP is faster thanks to the Wazero optimisations.</li> <li>Capsule HDK: <code>v0.0.7</code> (\ud83d\udc1e fix with Redis + Wazero v1.4.0)</li> <li>Capsule MDK: <code>v0.0.6</code> (\ud83d\udc1e fix with Redis)</li> </ul> <p><code>v0.4.1 \ud83e\uded1 [pepper]</code>: </p> <ul> <li>Update with the last version of Wazero v1.3.0.</li> <li>More \"practical\" sample: GitLab webhook sample.</li> <li>Capsule HTTP is faster thanks to the Wazero optimisations.</li> <li>Capsule HDK: <code>v0.0.6</code></li> <li>Capsule MDK: <code>v0.0.5</code></li> </ul>"},{"location":"#what-is-the-capsule-project","title":"What is the Capsule project?","text":"<p>Capsule is a set of WASM runners. Right now, the Capsule project is composed of:</p> <ul> <li>Capsule CLI: to simply execute a WebAssembly module in a terminal</li> <li>Capsule HTTP server to serve a WebAssembly module like a micro service or a function.</li> </ul> <ul> <li>Capsule applications are developed with GoLang and thanks to the \ud83d\udc9c Wazero project. </li> <li>The wasm modules are developed in GoLang and compiled with TinyGo \ud83d\udc9c (with the WASI specification)</li> </ul>"},{"location":"#host-dk-module-dk","title":"Host DK &amp; Module DK","text":"<ul> <li>The Capsule applications are developed thanks to the Capsule Host SDK (HDK)</li> <li>The Capsule modules executed by the The Capsule applications are developed thanks to the Capsule Module SDK (MDK)</li> </ul> <p>\ud83c\udf89 That means, since now, it's possible to develop various runners thanks to the Capsule Host SDK</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>More tutorials are coming soon!</p> <ul> <li>Capsule: the WASM runners project: with this blog post I explain how to create WASM modules (with the MDK) for the Capsule CLI and the Capsule HTTP server, but too, how to create your Capsule application (with the HDK).</li> </ul>"},{"location":"#what-does-a-wasm-capsule-module-look-like","title":"What does a WASM Capsule module look like?","text":""},{"location":"#wasm-module-for-the-capsule-cli","title":"WASM Module for the Capsule CLI","text":"<pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandle(Handle)\n}\n// Handle function\nfunc Handle(params []byte) ([]byte, error) {\ncapsule.Print(\"Environment variable \u2192 MESSAGE: \" + capsule.GetEnv(\"MESSAGE\"))\nerr := capsule.WriteFile(\"./hello.txt\", []byte(\"\ud83d\udc4b Hello World! \ud83c\udf0d\"))\nif err != nil {\ncapsule.Print(err.Error())\n}\ndata, err := capsule.ReadFile(\"./hello.txt\")\nif err != nil {\ncapsule.Print(err.Error())\n}\ncapsule.Print(\"\ud83d\udcdd: \" + string(data))\nreturn []byte(\"\ud83d\udc4b Hello \" + string(params)), nil\n}\n</code></pre>"},{"location":"#wasm-module-for-the-capsule-http-server","title":"WASM Module for the Capsule HTTP server","text":"<pre><code>// Package main\npackage main\nimport (\n\"strconv\"\n\"github.com/bots-garden/capsule-module-sdk\"\n\"github.com/valyala/fastjson\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(Handle)\n}\n// Handle function \nfunc Handle(param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\ncapsule.Print(\"\ud83d\udcdd: \" + param.Body)\ncapsule.Print(\"\ud83d\udd20: \" + param.Method)\ncapsule.Print(\"\ud83c\udf0d: \" + param.URI)\ncapsule.Print(\"\ud83d\udc52: \" + param.Headers)\nvar p fastjson.Parser\nv, err := p.Parse(param.Body)\nif err != nil {\ncapsule.Log(err.Error())\n}\nmessage := string(v.GetStringBytes(\"name\")) + \" \" + strconv.Itoa(v.GetInt(\"age\"))\ncapsule.Log(message)\nresponse := capsule.HTTPResponse{\nJSONBody: `{\"message\": \"`+message+`\", \"things\":{\"emoji\":\"\ud83d\udc2f\"}}`,\nHeaders: `{\"Content-Type\": \"application/json; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn response, nil\n}\n</code></pre>"},{"location":"#what-are-the-added-values-of-capsule","title":"What are the added values of Capsule?","text":"<p>Capsule applications bring superpowers to the WASM modules with host functions. Thanks to these host functions, a WASM function can, for example, prints a message, reads files, writes to files, makes HTTP requests, ... See the host functions section.</p> <p>Useful information for this project</p> <ul> <li>\ud83d\udd90 Issues: https://github.com/bots-garden/capsule/issues</li> <li>\ud83d\udea7 Milestones: https://github.com/bots-garden/capsule/milestones</li> <li>\ud83d\udce6 Releases: https://github.com/bots-garden/capsule/releases</li> </ul>"},{"location":"#history","title":"History","text":"<p>Releases</p> <ul> <li><code>v0.4.2 \u26f1\ufe0f [beach umbrella]</code>: update with the last version of Wazero v1.4.0 + \ud83d\udc1e fix with Redis.</li> <li><code>v0.4.1 \ud83e\uded1 [pepper]</code>: update with the last version of Wazero v1.3.0 + GitLab webhook sample</li> <li><code>v0.4.0 \ud83c\udf36\ufe0f [chili pepper]</code>: update of HDK 0.0.4 then 0.0.5, (\ud83c\udf89 performances: more than x 2 \ud83d\ude80). capsule-http: add of 2 endpoints (<code>/metrics</code>and <code>/health</code>) triggering the <code>OnMetrics</code> and <code>OnHealthCheck</code> functions of the WASM module. </li> <li><code>v0.3.9 \ud83e\udd52 [cucumber]</code>: update of HDK 0.0.3 with Wazero 1.2.0 and MDK 0.0.3 (encoding of the HTML string into JSON string, then it's easier to serve HTML)</li> <li><code>v0.3.8 \ud83e\udd6c [leafy greens]</code>: \ud83d\udc1b fixes of the FaaS mode</li> <li><code>v0.3.7 \ud83e\udd66 [broccoli]</code>: \ud83d\ude80 FaaS mode (documentation in progress) + NGrok integration</li> <li><code>v0.3.6 \ud83e\uded0 [blueberries]</code>: Prometheus metrics + \ud83d\udc33 Docker images</li> <li><code>v0.3.5 \ud83c\udf53 [strawberry]</code>: Update with HDK &amp; MDK <code>v0.0.2</code></li> <li><code>v0.3.4 \ud83c\udf4b [lemon]</code>: Capsule next generation (performances: x 10 \ud83d\ude80)</li> <li>\ud83c\udf0d Downloads: https://github.com/bots-garden/capsule/releases/tag/v0.3.8</li> <li>\ud83e\udd1a With the previous version of the project, Capsule was an only one application to run as an HTTP server, a CLI, a NATS subscriber and publisher and a MQTT subscriber and publisher. In the future, we will reintroduce the capabilities of NATS and MQTT, but with separate runners.</li> </ul>"},{"location":"capsule-http-enterprise/","title":"\ud83c\udfed Capsule HTTP Enterprise","text":"<p>\ud83d\udea7 stay tuned for new features</p>"},{"location":"capsule-http-faas-mode/","title":"\ud83d\ude80 Capsule HTTP FaaS mode","text":"<ul> <li>Released since Capsule HTTP <code>v0.3.7 \ud83e\udd66 [broccoli]</code></li> <li>This is work in progress \ud83d\udea7</li> </ul> <p>A Capsule HTTP server can start/spawn other Capsule HTTP server processes.</p>"},{"location":"capsule-http-faas-mode/#requirements","title":"Requirements","text":""},{"location":"capsule-http-faas-mode/#install-the-last-version-of-capsule-http","title":"Install the last version of Capsule HTTP","text":"<pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule-http https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-http-${VERSION}-${OS}-${ARCH}\nchmod +x capsule-http\nsudo cp capsule-http  /usr/local/bin/capsule-http\nrm capsule-http\ncapsule-http --version\n</code></pre> <p>Set the appropriate OS, ARCH and VERSION</p>"},{"location":"capsule-http-faas-mode/#install-the-last-version-of-capsctl","title":"Install the last version of CapsCtl","text":"<p>CapsCtl is a CLI to send commands to the Capsule HTTP server when it is unning in FaaS mode.</p> <pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsctl https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsctl-${VERSION}-${OS}-${ARCH}\nchmod +x capsctl\nsudo cp capsctl  /usr/local/bin/capsctl\nrm capsctl\ncapsctl --version\n</code></pre>"},{"location":"capsule-http-faas-mode/#start-capsule-http-faas-mode","title":"Start Capsule HTTP FaaS mode","text":"<pre><code>CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\" \\\ncapsule-http \\\n--wasm=./functions/index-page/index-page.wasm \\\n--httpPort=8080 \\\n--faas=true\n</code></pre> <p>Remarks:: if you use SSL certificates, use these options: - <code>--crt=faas.capsule.foundation.crt</code> - <code>--key=faas.capsule.foundation.key</code></p> <p>You should get an output like this: <pre><code>2023/05/29 15:12:18 \ud83d\ude80 faas mode activated!\n2023/05/29 15:12:18 \ud83d\udce6 wasm module loaded: ./functions/index-page/index-page.wasm\n2023/05/29 15:12:18 \ud83d\udc8a Capsule [HTTP] v0.4.2 \u26f1\ufe0f [beach umbrella]\n http server is listening on: 8080 \ud83c\udf0d\n</code></pre></p> <p>Remarks: - the wasm file (<code>--wasm</code>) is optional (a default message is served if not specified) - <code>CAPSULE_FAAS_TOKEN</code> is used to authenticate the <code>capsctl</code> CLI</p>"},{"location":"capsule-http-faas-mode/#start-a-function","title":"Start a function","text":"<p>With the FaaS mode activated, you can start functions. It' like running another Capsule HTTP processes (one wasm function == one Capsule HTTP process).</p> <pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\n# the main Capsule HTTP process is listeninhg on port 8080\nexport CAPSULE_MAIN_PROCESS_URL=\"http://localhost:8080\" capsctl \\\n--cmd=start \\\n--stopAfter=10 \\\n--name=hello \\\n--revision=green \\\n--description=\"this the hello module, green revision\" \\\n--env='[\"MESSAGE=\ud83d\udfe2\",\"GREETING=\ud83e\udd17\"]' \\\n--wasm=./functions/hello-green/hello-green.wasm\n</code></pre> <ul> <li><code>--stopAfter=10</code> this will stop the Capsule HTTP server process after 10 seconds ()optional</li> <li><code>--stopAfter</code> is not mandatory (then the Capsule HTTP server process will never stop)</li> <li>if the process is stopped, the Capsule HTTP server will be restarted at next call</li> <li><code>--description=</code> is optional</li> <li><code>--env='[\"MESSAGE=\ud83d\udfe2\",\"GREETING=\ud83e\udd17\"]'</code> allows to pass environment variables to the function (optional)</li> <li><code>--wasm</code>: where to find the wasm file</li> </ul> <p>Now you can use this URL <code>http://localhost:8080/functions/hello/green</code> to call the hello green function</p>"},{"location":"capsule-http-faas-mode/#call-the-hello-green-function","title":"Call the hello green function","text":"<pre><code>curl -X POST http://localhost:8080/functions/hello/green \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre>"},{"location":"capsule-http-faas-mode/#default-revision","title":"Default revision","text":"<p>If you don't specify a revision, the default revision is called default, then you can call the function like this:</p> <pre><code>curl -X POST http://localhost:8080/functions/hello \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre> <p>Or like this:</p> <pre><code>curl -X POST http://localhost:8080/functions/hello/default \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre> <p>\ud83d\udc4b the revision concept is useful to handle several version of a wasm module/function.</p>"},{"location":"capsule-http-faas-mode/#launch-another-function","title":"Launch another function","text":"<pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nexport CAPSULE_MAIN_PROCESS_URL=\"http://localhost:8080\" capsctl \\\n--cmd=start \\\n--name=hello \\\n--revision=blue \\\n--wasm=./functions/hello-blue/hello-blue.wasm\n</code></pre> <p>Now you can use this URL <code>http://localhost:8080/functions/hello/blue</code> to call the hello blue function</p>"},{"location":"capsule-http-faas-mode/#call-the-hello-blue-function","title":"Call the hello blue function","text":"<pre><code>curl -X POST http://localhost:8080/functions/hello/blue \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre>"},{"location":"capsule-http-faas-mode/#drop-stop-and-remove-a-running-function","title":"Drop: stop and remove a running function","text":"<pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nexport CAPSULE_MAIN_PROCESS_URL=\"http://localhost:8080\"\ncapsctl \\\n--cmd=drop \\\n--name=hello \\\n--revision=blue\n</code></pre>"},{"location":"capsule-http-faas-mode/#duplicate-a-running-capsule-http-server-process-with-a-new-revision-name","title":"Duplicate a running Capsule HTTP server process with a new revision name","text":"<pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nexport CAPSULE_MAIN_PROCESS_URL=\"http://localhost:8080\" capsctl \\\n--cmd=duplicate \\\n--name=hello \\\n--revision=green \\\n--newRevision=saved_green\n</code></pre> <p>It remains the same process (same <code>PID</code>), but you can access the function with this URL: <code>http://localhost:8080/functions/hello/saved_green</code> and this URL: <code>http://localhost:8080/functions/hello/green</code></p>"},{"location":"capsule-http-faas-mode/#call-the-hello-green-function_1","title":"Call the hello green function","text":"<pre><code>curl -X POST http://localhost:8080/functions/hello/saved_green \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\ncurl -X POST http://localhost:8080/functions/hello/green \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre>"},{"location":"capsule-http-faas-mode/#download-the-wasm-module-before-starting-the-function","title":"Download the wasm module before starting the function","text":"<p>You can specify to the Capsule HTTP process with the <code>--url</code> option, where to download the wasm file and where to save it before starting with the <code>--wasm</code> option:</p> <pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nexport CAPSULE_MAIN_PROCESS_URL=\"http://localhost:8080\"\ncapsctl \\\n--cmd=start \\\n--name=hello \\\n--revision=0.0.1 \\\n--wasm= ./store/hello.0.0.1.wasm \\\n--url=http://wasm.files.com/hello/0.0.1/hello.0.0.1.wasm\n</code></pre>"},{"location":"capsule-http-faas-mode/#authentication-of-the-downlad","title":"Authentication of the downlad","text":"<p>If you need to provide an authentication token, you can use these options:</p> <pre><code>--authHeaderName=\"PRIVATE-TOKEN\" \\\n--authHeaderValue=\"${GITLAB_WASM_TOKEN}\" \\\n</code></pre>"},{"location":"capsule-http-flags/","title":"\ud83d\udea9 Capsule HTTP Flags","text":"<p>\ud83d\udea7 This is a work in progress</p>"},{"location":"capsule-http-install-pi/","title":"Run a FaaS on a Raspberry PI","text":"<p>I did this on a Pi3A+ with the Raspberry PI OS Lite 64-bit</p>"},{"location":"capsule-http-install-pi/#install-capsule-http","title":"Install Capsule HTTP","text":"<pre><code># connect to the PI\nssh k33g@capsulezero.local\n\n## Install Capsule HTTP\nVERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule-http https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-http-${VERSION}-${OS}-${ARCH}\nchmod +x capsule-http\n./capsule-http --version\n</code></pre> <p>Or you can copy the appropriate Capsule HTTP binary from your computer to the RPI:</p> <pre><code>scp capsule-http-v0.4.1-linux-arm64 k33g@capsulezero.local:./\n</code></pre>"},{"location":"capsule-http-install-pi/#start-capsule-http-faas-mode","title":"Start Capsule HTTP FaaS mode","text":"<pre><code>ssh k33g@capsulezero.local -f \"./capsule-http --httpPort=8080 --faas=true\"\n</code></pre> <p>Try: <code>curl http://capsulezero.local:8080</code>, you should get <code>Capsule [HTTP] v0.4.2 \u26f1\ufe0f [beach umbrella][faas]</code></p>"},{"location":"capsule-http-install-pi/#deploy-some-functions","title":"Deploy some functions","text":"<pre><code># copy the functions to the RPI\ncd capsule-http/tests/faas\nscp -r ./functions k33g@capsulezero.local:./\n</code></pre> <p>requirement, install CapsCtl: capsule-http-faas-mode</p> <pre><code># start a function using capsctl\nexport CAPSULE_MAIN_PROCESS_URL=\"http://capsulezero.local:8080\" capsctl \\\n--cmd=start \\\n--stopAfter=10 \\\n--name=hey \\\n--revision=default \\\n--wasm=./functions/hey/hey.wasm\n</code></pre> <pre><code># Call the function\ncurl -X POST http://capsulezero.local:8080/functions/hey/default \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d \"Bob Morane\"\n</code></pre>"},{"location":"capsule-http-install-pi/#stop-capsule-http-faas-mode","title":"Stop Capsule HTTP FaaS mode","text":"<pre><code>ssh k33g@capsulezero.local -f \"pkill capsule-http\"\n</code></pre>"},{"location":"capsule-http-ovh-deploy/","title":"Deploy Capsule FaaS on OVH Cloud","text":"<p>For this recipe, I'm using an OVH Cloud compute instance (sponsored by @titimoby DevRel at OVH) with the following specifications:</p> <ul> <li>Model: D2-4</li> <li>RAM: 4 GB</li> <li>Processor: 2 vCores</li> </ul>"},{"location":"capsule-http-ovh-deploy/#ssh-connect-to-the-ovh-cloud-compute-instance","title":"SSH Connect to the OVH Cloud compute instance","text":"<pre><code>ssh -i ./keys/capsule ubuntu@${OVH_IP}\n</code></pre> <p>Remark: I'm using a ssh key to connect to the OVH Cloud instance and <code>OVH_IP</code> is the IP address of the OVH Cloud instance.</p>"},{"location":"capsule-http-ovh-deploy/#install-the-last-version-of-capsule-http-on-the-ovh-cloud-instance","title":"Install the last version of Capsule HTTP on the OVH Cloud instance","text":"<pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"amd64\"\nwget -O capsule-http https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-http-${VERSION}-${OS}-${ARCH}\nchmod +x capsule-http\nsudo cp capsule-http  /usr/local/bin/capsule-http\nrm capsule-http\ncapsule-http --version\n</code></pre> <p>If you already have Capsule HTTP installed and running, you need to stop it: <pre><code># from your computer\npkill capsule-http\n</code></pre></p>"},{"location":"capsule-http-ovh-deploy/#start-capsule-http-on-the-ovh-cloud-instance","title":"Start Capsule HTTP on the OVH Cloud instance","text":"<pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nnohup capsule-http --httpPort=8888 \\\n--faas=true \\\n--crt=faas.capsule.foundation.crt \\\n--key=faas.capsule.foundation.key &amp;&gt; /dev/null &amp;\n</code></pre> <ul> <li><code>CAPSULE_FAAS_TOKEN</code> allows to protect the admin routes</li> <li>I have a domain name linked to the instance <code>faas.capsule.foundation</code></li> <li><code>--crt=faas.capsule.foundation.crt</code> and <code>--key=faas.capsule.foundation.key</code> allow to use HTTPS.</li> <li><code>--httpPort=8888</code>, the port of the Capsule HTTP service.</li> </ul> <p>To be able to connect on https://faas.capsule.foundation/, you need to do the following: <pre><code>sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8888\nsudo apt-get install iptables-persistent\n</code></pre></p>"},{"location":"capsule-http-ovh-deploy/#check-the-status-of-capsule-http","title":"Check the status of Capsule HTTP","text":"<p>If you open this URL https://faas.capsule.foundation/ on your browser, you should see the following message:</p> <pre><code>Capsule [HTTP] v0.4.2 \u26f1\ufe0f [beach umbrella]\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#install-the-last-version-of-capsctl","title":"Install the last version of CapsCtl","text":"<p>CapsCtl is a CLI to send commands to the Capsule HTTP server when it is running in FaaS mode.</p> <pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsctl https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsctl-${VERSION}-${OS}-${ARCH}\nchmod +x capsctl\nsudo cp capsctl  /usr/local/bin/capsctl\nrm capsctl\ncapsctl --version\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#add-a-start-page-to-capsule-http","title":"Add a start page to Capsule HTTP","text":"<p>We need to add a start page to Capsule HTTP by creating a new WASM function (module).</p>"},{"location":"capsule-http-ovh-deploy/#indexhtml","title":"<code>index.html</code>","text":"<p>Create a file named <code>index.html</code> in a directory:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;Wasm is fantastic \ud83d\ude0d&lt;/title&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;style&gt;\n.container { min-height: 100vh; display: flex; justify-content: center; align-items: center; text-align: center; }\n.title { font-family: \"Source Sans Pro\", \"Helvetica Neue\", Arial, sans-serif; display: block; font-weight: 300; font-size: 80px; color: #35495e; letter-spacing: 1px; }\n.subtitle { font-family: \"Source Sans Pro\", \"Helvetica Neue\", Arial, sans-serif; font-weight: 300; font-size: 32px; color: #526488; word-spacing: 5px; padding-bottom: 15px; }\n.links { padding-top: 15px; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;section class=\"container\"&gt;\n&lt;div&gt;\n&lt;h1 class=\"title\"&gt;\ud83d\udc4b Hello World \ud83c\udf0d&lt;/h1&gt;\n&lt;h2 class=\"subtitle\"&gt;Served with \ud83d\udc9c by Capsule \ud83d\udc8a [HTTP] v0.4.2 \u26f1\ufe0f [beach umbrella] &lt;/h2&gt;\n&lt;h2 class=\"subtitle\"&gt;\ud83c\udf89 Hosted on OVH Cloud [\ud83d\ude80 Faas mode]&lt;/h2&gt;\n&lt;h2 class=\"subtitle\"&gt;\ud83e\udd70 With the help of @titimoby&lt;/h2&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#maingo","title":"<code>main.go</code>","text":"<p>Into the same directory, create a file named <code>main.go</code> and add the following code:</p> <pre><code>go mod init index.page\ntouch main.go\n</code></pre> <p>main.go <pre><code>// Package main =&gt; serving an html resource\npackage main\nimport (\n_ \"embed\"\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nvar (\n//go:embed index.html\nhtml []byte\n)\nfunc main() {\ncapsule.SetHandleHTTP(func (param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nreturn capsule.HTTPResponse{\nTextBody: string(html),\nHeaders: `{\n                \"Content-Type\": \"text/html; charset=utf-8\",\n                \"Cache-Control\": \"no-cache\",\n                \"X-Powered-By\": \"capsule-module-sdk\"\n            }`,\nStatusCode: 200,\n}, nil\n})\n}\n</code></pre></p>"},{"location":"capsule-http-ovh-deploy/#build-the-wasm-module","title":"Build the WASM module","text":"<p>Use the following command to build the WASM module: <pre><code>go mod tidy\ntinygo build -o index.page.wasm \\\n-scheduler=none \\\n--no-debug \\\n-target wasi ./main.go </code></pre></p>"},{"location":"capsule-http-ovh-deploy/#deploy-the-wasm-module-on-the-ovh-cloud-instance","title":"Deploy the WASM module on the OVH Cloud instance","text":"<p>From your computer, run the following command: <pre><code>scp -i ./keys/capsule ./index-page/index.page.wasm ubuntu@${OVH_IP}:./\n</code></pre></p>"},{"location":"capsule-http-ovh-deploy/#start-the-indexpage-function","title":"Start the <code>index.page</code> function","text":"<pre><code>export CAPSULE_FAAS_TOKEN=\"ILOVEPANDAS\"\nexport CAPSULE_MAIN_PROCESS_URL=\"https://faas.capsule.foundation\"\ncapsctl \\\n--cmd=start \\\n--name=index.page \\\n--revision=default \\\n--wasm=./index.page.wasm\n</code></pre> <p>You should get this output: <pre><code>\u2705 index.page/default is started\n\u2139\ufe0f url: https://faas.capsule.foundation/functions/index.page/default\n</code></pre></p> <p>Now you can call the function: <pre><code>curl -X GET \"https://faas.capsule.foundation/functions/index.page/default\"\n</code></pre></p>"},{"location":"capsule-http-ovh-deploy/#indexpage-function-name-is-mapped-to-the-root","title":"<code>index.page</code> function name is mapped to the <code>/</code> root","text":"<p>If you open this URL: https://faas.capsule.foundation in your browser, you will reach the <code>index.page</code> function.</p> <p>It's a specific case of Capsule FaaS, and it's only possible because you name the function <code>index.page</code> when you started it with this command:</p> <pre><code>capsctl \\\n--cmd=start \\\n--name=index.page \\\n--revision=default \\\n--wasm=./index.page.wasm\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#create-and-deploy-a-new-function","title":"Create and Deploy a new function","text":""},{"location":"capsule-http-ovh-deploy/#maingo_1","title":"<code>main.go</code>","text":"<p>Into the a directory, create a file named <code>main.go</code> and add the following code:</p> <pre><code>go mod init hello\ntouch main.go\n</code></pre> <pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(func (param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nreturn capsule.HTTPResponse{\nTextBody: \"\ud83c\udf4a \ud83d\udc4b Hey \" + param.Body +\" !\",\nHeaders: `{\"Content-Type\": \"text/plain; charset=utf-8\"}`,\nStatusCode: 200,\n}, nil\n})\n}\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#build-the-wasm-module_1","title":"Build the WASM module","text":"<pre><code>tinygo build -o hello.wasm \\\n-scheduler=none \\\n--no-debug \\\n-target wasi ./main.go </code></pre>"},{"location":"capsule-http-ovh-deploy/#deploy-the-wasm-module-on-the-ovh-cloud-instance_1","title":"Deploy the WASM module on the OVH Cloud instance","text":"<pre><code>scp -i ./keys/capsule ./hello/hello.wasm ubuntu@${OVH_IP}:./\n</code></pre>"},{"location":"capsule-http-ovh-deploy/#start-the-hello-function-with-a-revision-named-orange","title":"Start the <code>hello</code> function with a revision named <code>orange</code>","text":"<pre><code>capsctl \\\n--cmd=start \\\n--name=hello \\\n--revision=orange \\\n--wasm=./hello.wasm\n</code></pre> <p>You should get this output: <pre><code>\u2705 hello/orange is started\n\u2139\ufe0f url: https://faas.capsule.foundation/functions/hello/orange\n</code></pre></p> <p>Now you can call the function: <pre><code>curl -X POST ${CAPSULE_MAIN_PROCESS_URL}/functions/hello/orange \\\n-H 'Content-Type: text/plain; charset=utf-8' \\\n-d 'Bob Morane'\n</code></pre></p> <p>You should get this output: <pre><code>\ud83c\udf4a \ud83d\udc4b Hey Bob Morane !\n</code></pre></p>"},{"location":"capsule-http-serve-html/","title":"Serve HTML with Capsule HTTP, step by step","text":""},{"location":"capsule-http-serve-html/#create-an-html-file-indexhtml","title":"Create an HTML file: <code>index.html</code>","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;Capsule \ud83d\udc9c Wasm &amp; Wazero&lt;/title&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;style&gt;\n.container { min-height: 100vh; display: flex; justify-content: center; align-items: center; text-align: center; }\n.title { font-family: \"Source Sans Pro\", \"Helvetica Neue\", Arial, sans-serif; display: block; font-weight: 300; font-size: 80px; color: #35495e; letter-spacing: 1px; }\n.subtitle { font-family: \"Source Sans Pro\", \"Helvetica Neue\", Arial, sans-serif; font-weight: 300; font-size: 32px; color: #526488; word-spacing: 5px; padding-bottom: 15px; }\n.links { padding-top: 15px; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;section class=\"container\"&gt;\n&lt;div&gt;\n&lt;h1 class=\"title\"&gt;\ud83d\udc4b Hello World \ud83c\udf0d&lt;/h1&gt;\n&lt;h2 class=\"subtitle\"&gt;Served with \ud83d\udc9c by Capsule [HTTP] v0.4.1 \ud83e\uded1 [pepper] \ud83d\udc8a&lt;/h2&gt;\n&lt;h2 class=\"subtitle\"&gt;\ud83c\udf89 Happily built thanks to Wazero&lt;/h2&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"capsule-http-serve-html/#create-a-new-wasm-module","title":"Create a new WASM module","text":"<pre><code>go mod init index\ntouch main.go\n</code></pre> <p><code>main.go</code> <pre><code>package main\nimport (\n_ \"embed\"\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nvar (\n//go:embed index.html\nhtml []byte\n)\nfunc main() {\ncapsule.SetHandleHTTP(func (param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nreturn capsule.HTTPResponse{\nTextBody: string(html),\nHeaders: `{\n                \"Content-Type\": \"text/html; charset=utf-8\",\n                \"Cache-Control\": \"no-cache\",\n                \"X-Powered-By\": \"capsule-module-sdk\"\n            }`,\nStatusCode: 200,\n}, nil\n})\n}\n</code></pre></p>"},{"location":"capsule-http-serve-html/#build-the-module","title":"Build the module","text":"<pre><code>tinygo build -o index.wasm \\\n-scheduler=none \\\n--no-debug \\\n-target wasi ./main.go </code></pre>"},{"location":"capsule-http-serve-html/#serve-the-module","title":"Serve the module","text":"<pre><code>capsule-http --wasm=./index.wasm --httpPort=7070\n</code></pre> <p>Go to http://localhost:7070 with your favorite browser.</p>"},{"location":"docker-capsule-http/","title":"\ud83d\udc33 Capsule HTTP Docker image","text":"<p>Capsule HTTP Docker images v0.4.2 \u26f1\ufe0f [beach umbrella]</p> <ul> <li><code>botsgarden/capsule-http-linux-arm64:0.4.2</code></li> <li><code>botsgarden/capsule-http-linux-amd64:0.4.2</code></li> </ul> <p>https://hub.docker.com/repositories/botsgarden</p> <p>\ud83d\udc4b testing of these images is in progress, so please be patient \ud83d\ude4f</p>"},{"location":"docker-capsule-http/#how-to-use-it","title":"How to use it","text":"<pre><code>GOOS=\"linux\" GOARCH=\"arm64\"\nIMAGE_TAG=\"0.4.2\"\nIMAGE_NAME=\"botsgarden/capsule-http-${GOOS}-${GOARCH}\"\ndocker run \\\n-p 8080:8080 \\\n-v $(pwd)/functions/hello-world:/app --rm ${IMAGE_NAME}:${IMAGE_TAG} \\\n/capsule-http \\\n--wasm=./app/hello-world.wasm \\\n--httpPort=8080\n</code></pre>"},{"location":"docker-capsule-http/#dockerize-capsule-http-and-a-wasm-module","title":"Dockerize Capsule HTTP and a WASM module","text":"<p>Create a new <code>Dockerfile</code>:</p> <pre><code>FROM botsgarden/capsule-http-linux-arm64:0.4.2\nCOPY hello-world.wasm .\nEXPOSE 8080\nCMD [\"/capsule-http\", \"--wasm=./hello-world.wasm\", \"--httpPort=8080\"]\n</code></pre> <p>Build the image:</p> <pre><code>IMAGE_NAME=\"demo-capsule-http\"\ndocker login -u ${DOCKER_USER} -p ${DOCKER_PWD}\ndocker build -t ${IMAGE_NAME} . docker images | grep ${IMAGE_NAME}\n</code></pre> <p>Run the container:</p> <pre><code>IMAGE_NAME=\"demo-capsule-http\"\ndocker run \\\n-p 8080:8080 \\\n--rm ${IMAGE_NAME}\n</code></pre> <p>Call the service:</p> <pre><code>JSON_DATA='{\"name\":\"Bob Morane\",\"age\":42}'\ncurl -X POST http://localhost:8080 \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d \"${JSON_DATA}\"\n</code></pre>"},{"location":"getting-started-cli/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cli/#use-the-capsule-cli","title":"Use the Capsule CLI","text":"<p>First, download the last version of the Capsule CLI for the appropriate OS &amp; ARCH (and release version):</p> <pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-${VERSION}-${OS}-${ARCH}\nchmod +x capsule\n</code></pre>"},{"location":"getting-started-cli/#run-a-wasm-capsule-module","title":"Run a WASM Capsule module","text":"<p>To run a WASM Capsule module you need to set 2 flags:</p> <ul> <li><code>--wasm</code>: the path to the WASM module</li> <li><code>--params</code>: the parameter to pass to the WASM module</li> </ul> <pre><code>./capsule \\\n--wasm=./functions/hello/hello.wasm \\\n--params=\"Hello World\"\n</code></pre> <p>You can remotely download  the WASM module with the <code>--url</code> flag: <pre><code>./capsule \\\n--url=http://localhost:5000/hello-world.wasm \\\n--wasm=./tmp/hello-world.wasm </code></pre></p>"},{"location":"getting-started-cli/#develop-a-wasm-capsule-module","title":"Develop a WASM Capsule module","text":"<p>Have a look to these samples:</p> <ul> <li>Capsule MDK documentation: first CLI module</li> <li>capsule-cli/functions</li> <li>Samples of the Capsule MDK</li> </ul>"},{"location":"getting-started-http-ngrok/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-http-ngrok/#use-the-capsule-http-server-with-ngrok","title":"Use the Capsule HTTP server with Ngrok","text":"<p>With the <code>ngrok-go</code> library, you can use the Capsule HTTP server with Ngrok (you need to create an account on Ngrok). </p> <pre><code>NGROK_AUTHTOKEN=\"${YOUR_NGROK_AUTHTOKEN}\" \\\n./capsule-http \\\n--wasm=./functions/hello-world/hello-world.wasm \\\n--httpPort=6666\n</code></pre> <p>The ouput will be like this:</p> <pre><code>2023/05/18 11:25:36 \ud83d\udc8a Capsule v0.4.2 \u26f1\ufe0f [beach umbrella] http server is listening on: 6666 \ud83c\udf0d\n2023/05/18 11:25:37 \ud83d\udc4b Ngrok tunnel created: https://d298-88-173-112-231.ngrok-free.app\n2023/05/18 11:25:37 \ud83e\udd1a Ngrok URL: /home/ubuntu/workspaces/capsule/capsule-http/ngrok.url\n</code></pre> <p>And you can access the wasm service with this url: <code>https://d298-88-173-112-231.ngrok-free.app</code> (the ngrok url is generated and different each time).</p> <p>\ud83d\udc4b You can retrieve the ngrok url in this file <code>ngrok.url</code></p> <p>If you own a Ngrok subscription, you can set your ngrok domain like this:</p> <pre><code>NGROK_DOMAIN=\"${YOUR_NGROK_DOMAIN}\" \\ # something like that \"capsule.ngrok.dev\"\nNGROK_AUTHTOKEN=\"${YOUR_NGROK_AUTHTOKEN}\" \\\n./capsule-http \\\n--wasm=./functions/hello-world/hello-world.wasm \\\n--httpPort=6666\n</code></pre> <p>Ngrok and ngrok-go</p> <ul> <li>Ngrok</li> <li>ngrok-go</li> </ul>"},{"location":"getting-started-http/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-http/#use-the-capsule-http-server","title":"Use the Capsule HTTP server","text":"<p>First, download the last version of the Capsule HTTP server for the appropriate OS &amp; ARCH (and release version):</p> <pre><code>VERSION=\"v0.4.2\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule-http https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-http-${VERSION}-${OS}-${ARCH}\nchmod +x capsule-http\n</code></pre>"},{"location":"getting-started-http/#write-a-wasm-capsule-module","title":"Write a WASM Capsule module","text":"<pre><code>package main\nimport (\n\"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(func(param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nresponse := capsule.HTTPResponse{\nJSONBody:   `{\"message\": \"Hello World\"}`,\nHeaders:    `{\"Content-Type\": \"application/json; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn response, nil\n})\n}\n</code></pre> <p>Build the WASM module:</p> <pre><code>tinygo build -o hello-world.wasm \\\n-scheduler=none \\\n--no-debug \\\n-target wasi ./main.go </code></pre>"},{"location":"getting-started-http/#serve-a-wasm-capsule-module","title":"Serve a WASM Capsule module","text":"<p>To run a WASM Capsule module you need to set 2 flags:</p> <ul> <li><code>--wasm</code>: the path to the WASM module</li> <li><code>--params</code>: the parameter to pass to the WASM module</li> </ul> <pre><code>./capsule-http \\\n--wasm=./functions/hello-world/hello-world.wasm\\\n--httpPort=8080\n</code></pre> <p>You can query the service like this: <pre><code>curl -X POST http://localhost:8080 \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d '{\"name\":\"Bob Morane\",\"age\":42}'\n</code></pre></p> <p>You can remotely download  the WASM module with the <code>--url</code> flag: <pre><code>./capsule-http \\\n--url=http://localhost:5000/hello-world.wasm \\\n--wasm=./tmp/hello-world.wasm --httpPort=8080\n</code></pre></p> <p>\ud83d\udc4b if you need to set an authentication header you can use these flags: <code>--authHeaderName</code> and <code>--authHeaderValue</code>:</p> <pre><code>./capsule-http \\\n--url=${DOWNLOAD_URL} \\\n--authHeaderName=\"PRIVATE-TOKEN\" \\\n--authHeaderValue=\"${TOKEN}\" \\\n--wasm=${WASM_FILE} \\\n--httpPort=${HTTP_PORT}\n</code></pre>"},{"location":"getting-started-http/#monitoring-the-service","title":"Monitoring the service","text":"<p>Capsule HTTP server exposes a REST API (<code>/metrics</code> endpoint) that can be used to monitor the service. You have to write the logic to generate the metrics and expose them to Prometheus.</p> <p>An HTTP request to the <code>/metrics</code> endpoint will trigger the call of the exposed <code>OnMetrics</code> function of the WASM module. You need to implement the <code>OnMetrics</code> function in your WASM module:</p> <pre><code>//export OnMetrics\nfunc OnMetrics() uint64 {\n// Generate OpenText Prometheus metric\ncounterMetrics := []string{\n\"# HELP call counter\",\n\"# TYPE call_counter counter\",\n\"call_counter \" + strconv.Itoa(counter)}\nresponse := capsule.HTTPResponse{\nTextBody:   strings.Join(counterMetrics, \"\\n\"),\nHeaders:    `{\"Content-Type\": \"text/plain; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn capsule.Success([]byte(capsule.StringifyHTTPResponse(response)))\n}\n</code></pre> <ul> <li>Don't forget to expose the function: <code>//export OnMetrics</code></li> <li>You can find a complete sample here: hello-world sample</li> </ul>"},{"location":"getting-started-http/#health-check","title":"Health Check","text":"<p>Capsule HTTP server exposes a REST API (<code>/health</code> endpoint) that can be used to teturn a health status. You have to write the logic to generate the status.</p> <p>An HTTP request to the <code>/health</code> endpoint will trigger the call of the exposed <code>OnHealthCheck</code> function of the WASM module. You need to implement the <code>OnHealthCheck</code> function in your WASM module:</p> <pre><code>//export OnHealthCheck\nfunc OnHealthCheck() uint64 {\nresponse := capsule.HTTPResponse{\nJSONBody:   `{\"message\": \"OK\"}`,\nHeaders:    `{\"Content-Type\": \"application/json; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn capsule.Success([]byte(capsule.StringifyHTTPResponse(response)))\n}\n</code></pre> <ul> <li>Don't forget to expose the function: <code>//export OnHealthCheck</code></li> <li>You can find a complete sample here: hello-world sample</li> </ul>"},{"location":"getting-started-http/#onstart-and-onstop-functions","title":"<code>OnStart</code> and <code>OnStop</code> functions","text":"<p>You can add a <code>OnStart</code> and <code>OnStop</code> function to the WASM module. These functions will be called when the service starts and stops.</p> <pre><code>//export OnStart\nfunc OnStart() {\ncapsule.Print(\"\ud83d\ude97 OnStart\")\n}\n//export OnStop\nfunc OnStop() {\ncapsule.Print(\"\ud83d\ude99 OnStop\")\n}\n</code></pre> <ul> <li>Don't forget to expose the functions</li> <li>You can find a complete sample here: hello-world sample</li> </ul>"},{"location":"getting-started-http/#develop-a-wasm-capsule-module","title":"Develop a WASM Capsule module","text":"<p>Have a look to these samples:</p> <ul> <li>Capsule MDK documentation: first HTTP module</li> <li>capsule-http/functions</li> <li>Samples of the Capsule MDK</li> </ul>"},{"location":"host-functions-intro/","title":"Host functions","text":"<p>\ud83d\udea7 this is a work in progress, each host function will be detailed with samples.</p> <p>The Capsule applications (and the Capsule HDK) offer some capabilities to the wasm modules by providing some \"host functions\".</p> <p>This is the list of the available host functions:</p> <ul> <li>Print a message: <code>Print(message string)</code>, usage: <code>capsule.Print(\"\ud83d\udc4b Hello Worls \ud83c\udf0d\")</code></li> <li>Log a message: <code>Log(message string)</code>, usage: <code>capsule.Log(\"\ud83d\ude21 something wrong\")</code></li> <li>Get the value of an environment variable: <code>GetEnv(variableName string) string</code>, usage: <code>capsule.GetEnv(\"MESSAGE\")</code></li> <li>Read a text file: <code>ReadFile(filePath string) ([]byte, error)</code>, usage: <code>data, err := capsule.ReadFile(\"./hello.txt\")</code></li> <li>Write a content to a text file: <code>WriteFile(filePath string, content []byte) error</code>, usage: <code>err := capsule.WriteFile(\"./hello.txt\", []byte(\"\ud83d\udc4b Hello World! \ud83c\udf0d\"))</code></li> <li>Make an HTTP request: <code>HTTP(request HTTPRequest) (HTTPResponse, error)</code>, usage: <code>respJSON, err := capsule.HTTP(capsule.HTTPRequest{})</code>, see the \"hey-people\" sample</li> <li>Memory Cache: see the \"mem-db\" sample</li> <li><code>CacheSet(key string, value []byte) []byte</code></li> <li><code>CacheGet(key string) ([]byte, error)</code></li> <li><code>CacheDel(key string) []byte</code></li> <li><code>CacheKeys(filter string) ([]string, error)</code> (right now, you can only use this filter: <code>*</code>)</li> <li>Redis Cache: see the \"redis-db\" sample</li> <li><code>RedisSet(key string, value []byte) ([]byte, error)</code></li> <li><code>RedisGet(key string) ([]byte, error)</code></li> <li><code>RedisDel(key string) ([]byte, error)</code></li> <li><code>RedisKeys(filter string) ([]string, error)</code></li> </ul>"}]}