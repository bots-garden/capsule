{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsule: the nano (wasm) functions runner","text":"<p>What's new?</p> <ul> <li><code>v0.3.1 \ud83d\udc0a [Tampa Bay]</code>: dependencies updates: wazero to 1.0.0-pre.8</li> <li><code>v0.3.0 \ud83c\udf84 [Christmas tree]</code>: Refactoring (Capsule is at least 4 times faster than the previous version).</li> <li><code>v0.2.9 \ud83e\udd9c [parrot]</code>: Hot reloading of the wasm module see the \"Reload the module\" section and HTTP service refactoring.</li> <li><code>v0.2.8 \ud83e\udda4 [dodo]</code>: Capsule uses now Fiber instead Gin. The size of the Capsule Runner Docker image is now 16.8M!</li> </ul>"},{"location":"#what-is-capsule","title":"What is Capsule?","text":"<p>Capsule is a WebAssembly Function Runner. It means that Capsule is both:</p> <ul> <li>An HTTP server that serves WebAssembly functions</li> <li>A NATS subscriber and publisher (written with WebAssembly)</li> <li>A MQTT subscriber and publisher (written with WebAssembly)</li> <li>A CLI, you can simply execute a WASM function in a terminal</li> </ul> <ul> <li>Capsule is developed with GoLang and thanks to the \ud83d\udc9c Wazero project</li> <li>The wasm modules are developed in GoLang and compiled with TinyGo \ud83d\udc9c (with the WASI specification)</li> </ul>"},{"location":"#what-does-a-wasm-function-look-like-with-capsule","title":"What does a WASM function look like with Capsule?","text":"<pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(request hf.Request) (response hf.Response, errResp error) {\nheadersResp := map[string]string{\n\"Content-Type\": \"application/json; charset=utf-8\",\n}\njsondoc := `{\"message\": \"\ud83d\udc4b Hello World \ud83c\udf0d\"}`\nreturn hf.Response{Body: jsondoc, Headers: headersResp}, err\n}\n</code></pre>"},{"location":"#what-are-the-added-values-of-capsule","title":"What are the added values of Capsule?","text":"<p>Capsule brings superpowers to the WASM function modules with host functions. Thanks to these host functions, a WASM function can, for example, prints a message, reads files, writes to files, makes HTTP requests, ... See the host functions section.</p> <p>Useful information for this project</p> <ul> <li>\ud83d\udd90 Issues: https://github.com/bots-garden/capsule/issues</li> <li>\ud83d\udea7 Milestones: https://github.com/bots-garden/capsule/milestones</li> <li>\ud83d\udce6 Releases: https://github.com/bots-garden/capsule/releases</li> </ul>"},{"location":"capsule-faas/","title":"Capsule FaaS (experimental)","text":"<p>There are four additional components to use Capsule (the wasm module launcher/executor) in FaaS mode:</p> <ul> <li>capsule-registry: a wasm module registry (\ud83d\udea7 support of https://wapm.io/ in progress)</li> <li>capsule-reverse-proxy: a reverse-proxy to simplify the functions (wasm modules) access</li> <li>capsule-worker: a server to start the functions (wasm modules) remotely</li> <li>capsule-ctl (short name: <code>caps</code>): a CLI to facilitate the interaction with the worker</li> </ul> <ul> <li>You can use the capsule registry independently of FaaS mode, only to provide wasm modules to the capsule launcher</li> <li>You can use the capsule reverse-proxy independently of FaaS mode, only to get only one access URL</li> </ul>"},{"location":"cookbook-civo/","title":"\ud83e\udd58 CookBook","text":""},{"location":"cookbook-civo/#deploy-a-capsule-function-on-civo","title":"Deploy a Capsule function on Civo","text":"<p>What is Civo?</p> <p>Civo is a cloud native service provider. They are doing K3S as a service and the UX is just amazing \ud83d\ude0d</p>"},{"location":"cookbook-civo/#requirements","title":"Requirements","text":"<p>First, you need an account on Civo, then you will need to install some tools.</p> <p>The install commands I used were tested on macOs and Ubuntu. I'm using brew, but there are severeal other ways to install all the needed tools.</p> <ul> <li>kubectl:   <pre><code>brew install kubernetes-cli\n</code></pre></li> <li>Civo CLI:   <pre><code>brew tap civo/tools\nbrew install civo\n</code></pre></li> <li>K9s: (optional, but K9s is a great tool, very useful to manage your cluster) <pre><code>brew install derailed/k9s/k9s\n</code></pre></li> </ul>"},{"location":"cookbook-civo/#create-a-k3s-cluster-on-civo","title":"Create a K3s cluster on Civo","text":"<p>In order to use the Civo CLI you will need to authenticate yourself to the Civo API using a key. You can find the key or regenerate a new one at https://www.civo.com/api.</p> <p>Save your key in an environment variable: <code>CIVO_API_KEY</code>. And then use the below commands to create a cluster on Civo:</p> <pre><code>CLUSTER_NAME=\"tinypanda\"\nCLUSTER_SIZE=\"g4s.kube.xsmall\"\nCLUSTER_NODES=1\nCLUSTER_REGION=\"FRA1\"\nmkdir -p config\nexport KUBECONFIG=$PWD/config/k3s.yaml\n\n# Add the key to the CLI tool\ncivo apikey add civo-key ${CIVO_API_KEY}\ncivo apikey current civo-key\n\n# Create the cluster\ncivo kubernetes create ${CLUSTER_NAME} \\\n--size=${CLUSTER_SIZE} \\\n--nodes=${CLUSTER_NODES} \\\n--region=${CLUSTER_REGION} \\\n--wait\n\n# Get the kubernetes config file\ncivo --region=${CLUSTER_REGION} \\\nkubernetes config ${CLUSTER_NAME} &gt; ./config/k3s.yaml\n</code></pre> <p>Output: <pre><code>Saved the API Key civo-key\nSet the default API Key to be civo-key\nCreating a 1 node k3s cluster of g4s.kube.xsmall instances called tinypanda...\n\nThe cluster tinypanda (af4abac9-6fff-463d-b89d-dfc51cdf3333)\nhas been created in 1 min 10 sec\n</code></pre></p>"},{"location":"cookbook-civo/#look-at-your-cluster","title":"Look at your cluster","text":"<p>You can use K9s to check your new cluster with the below commands:</p> <pre><code>export KUBECONFIG=$PWD/config/k3s.yaml\nk9s --all-namespaces\n</code></pre> <p></p>"},{"location":"cookbook-civo/#create-a-new-capsule-function","title":"Create a new Capsule function","text":"<p>hello.go: <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"github.com/tidwall/gjson\"\n\"github.com/tidwall/sjson\"\n)\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(request hf.Request) (response hf.Response, errResp error) {\nname := gjson.Get(request.Body, \"name\")\nheadersResp := map[string]string{\n\"Content-Type\": \"application/json; charset=utf-8\",\n}\njsondoc := `{\"message\": \"\"}`\njsondoc, _ = sjson.Set(jsondoc, \"message\", \"\ud83d\udc4b hello \" + name.Str)\nreturn hf.Response{Body: jsondoc, Headers: headersResp}, nil\n}\n</code></pre></p> <p>go.mod: <pre><code>module hello\n\ngo 1.18\n</code></pre></p>"},{"location":"cookbook-civo/#dockerize-the-function","title":"Dockerize the function","text":"<p>Dockerfile: <pre><code>FROM k33g/capsule-builder:0.0.4\nCOPY go.mod ./\nCOPY hello.go ./\nRUN  go get -u ./...; go mod tidy;\nRUN tinygo build -o hello.wasm -target wasi hello.go\n\nFROM k33g/capsule-launcher:0.2.9\nCOPY --from=0 /home/function/hello.wasm ./\nEXPOSE 8080\nCMD [\"/capsule\", \"-wasm=./hello.wasm\", \"-mode=http\", \"-httpPort=8080\"]\n</code></pre></p> <p>We use multi-stage builds to first build the wasm function and then to create the smallest image as possible to serve the function.</p>"},{"location":"cookbook-civo/#build-and-push-the-docker-image-to-the-docker-hub","title":"Build and push the Docker image to the Docker Hub","text":"<p>Build the image: <pre><code>IMAGE_NAME=\"capsule-hello\"\nIMAGE_TAG=\"0.0.0\"\ndocker login -u ${DOCKER_USER} -p ${DOCKER_PWD}\ndocker build -t ${IMAGE_NAME} .\n\ndocker images | grep ${IMAGE_NAME}\n</code></pre></p> <p>Push to the Docker hub: <pre><code>IMAGE_NAME=\"capsule-hello\"\nIMAGE_TAG=\"0.0.0\"\ndocker tag ${IMAGE_NAME} ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\ndocker push ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\n</code></pre></p>"},{"location":"cookbook-civo/#test-the-image","title":"Test the image","text":"<pre><code>IMAGE_NAME=\"capsule-hello\"\nIMAGE_TAG=\"0.0.0\"\ndocker run -p 8080:8080 --rm ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\n</code></pre> <p>Output: <pre><code>\ud83d\udc8a Capsule ( v0.3.0 \ud83c\udf84 [Christmas tree] ) http server is listening on: 8080 \ud83c\udf0d\n</code></pre></p> <p>Test your deployed function: <pre><code>curl -v -X POST http://localhost:8080 \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"Bob\"}'\n</code></pre></p> <p>Output: <pre><code>{\"message\":\"\ud83d\udc4b hello Bob\"}\n</code></pre></p>"},{"location":"cookbook-civo/#create-the-manifest-to-deploy-the-function","title":"Create the manifest to deploy the function","text":""},{"location":"cookbook-civo/#some-information","title":"Some information","text":"<p>Before creating the manifest we need some information:</p> <pre><code>CLUSTER_NAME=\"tinypanda\"\nCLUSTER_REGION=\"FRA1\"\ncivo --region=${CLUSTER_REGION} kubernetes show ${CLUSTER_NAME}\n</code></pre> <p>Output: <pre><code>                    ID : af4abac9-6fff-463d-b89d-dfc51cdf3333\n                  Name : tinypanda\n                Region : FRA1\n                 Nodes : 1\nSize : g4s.kube.xsmall\n                Status : ACTIVE\n              Firewall : k3s-cluster-tinypanda-a39c-dce40a\n               Version : 1.23.6-k3s1\n          API Endpoint : https://74.220.24.41:6443\n           External IP : 74.220.24.41\n          DNS A record : af4abac9-6fff-463d-b89d-dfc51cdf3333.k8s.civo.com\nInstalled Applications : metrics-server, Traefik-v2-nodeport\n</code></pre></p> <p>\ud83d\udd90 save this information somewhere: <code>DNS A record : af4abac9-6fff-463d-b89d-dfc51cdf3333.k8s.civo.com</code>, you will use it to the <code>host</code> value of the <code>Ingress</code> section of the manifest. The name of our application will be <code>capsule-hello</code>, then url to reach it will be <code>capsule-hello.af4abac9-6fff-463d-b89d-dfc51cdf3333.k8s.civo.com</code>.</p>"},{"location":"cookbook-civo/#deployment-manifest","title":"Deployment manifest","text":"<p>Now, create a deployment manifest:</p> <p>deploy.hello.yaml <pre><code>---\n# Service\napiVersion: v1\nkind: Service\nmetadata:\nname: capsule-hello\nspec:\nselector:\napp: capsule-hello\nports:\n- port: 8080\ntargetPort: 8080\n---\n# Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: capsule-hello\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp: capsule-hello\ntemplate:\nmetadata:\nlabels:\napp: capsule-hello\nspec:\ncontainers:\n- name: capsule-hello\nimage: k33g/capsule-hello:0.0.0\nports:\n- containerPort: 8080\nimagePullPolicy: Always\n---\n# Ingress\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: capsule-hello\nspec:\nrules:\n- host: capsule-hello.af4abac9-6fff-463d-b89d-dfc51cdf3333.k8s.civo.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: capsule-hello\nport:\nnumber: 8080\n</code></pre></p>"},{"location":"cookbook-civo/#deploy","title":"Deploy \ud83d\ude80","text":"<p>Run the below commands to deploy the function on the Civo cluster: <pre><code>export KUBECONFIG=$PWD/config/k3s.yaml\n# Create a demo namespace\nexport KUBE_NAMESPACE=\"demo\"\nkubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -\n\nkubectl apply -f deploy.hello.yaml -n ${KUBE_NAMESPACE}\n</code></pre></p> <p>Output: <pre><code>namespace/demo created\nservice/capsule-hello created\ndeployment.apps/capsule-hello created\ningress.networking.k8s.io/capsule-hello created\n</code></pre></p> <p>You can see in K9s that you get a new pod:</p> <p></p>"},{"location":"cookbook-civo/#call-the-function","title":"Call the function","text":"<p>You can now use your new function</p> <pre><code>export APPLICATION_NAME=\"capsule-hello\"\nexport DNS=\"af4abac9-6fff-463d-b89d-dfc51cdf3333.k8s.civo.com\"\ncurl http://${APPLICATION_NAME}.${DNS} -H 'content-type: application/json' -d '{\"name\": \"Jane Doe\"}'\ncurl http://${APPLICATION_NAME}.${DNS} -H 'content-type: application/json' -d '{\"name\": \"John Doe\"}'\ncurl http://${APPLICATION_NAME}.${DNS} -H 'content-type: application/json' -d '{\"name\": \"Bob Morane\"}'\n</code></pre> <p>Output: <pre><code>{\"message\":\"\ud83d\udc4b hello Jane Doe\"}{\"message\":\"\ud83d\udc4b hello John Doe\"}{\"message\":\"\ud83d\udc4b hello Bob Morane\"}\n</code></pre></p> <p>\ud83c\udf89 You see, that was pretty straightforward to do and easy to reproduce.</p> <p>How to delete the cluster?</p> <pre><code>civo kubernetes remove ${CLUSTER_NAME} --region=${CLUSTER_REGION} --yes\n</code></pre>"},{"location":"cookbook-exoscale/","title":"\ud83e\udd58 CookBook","text":""},{"location":"cookbook-exoscale/#deploy-a-capsule-function-on-exoscale","title":"Deploy a Capsule function on Exoscale","text":"<p>What is Exoscale?</p> <p>Exoscale is a Swiss cloud provider, that offers a wide range of cloud services like: - Compute instances - Kubernetes clusters - Object storage - Databases as a service (PostgreSQL, Redis, Kafka, Opensearch, MySql) - DNS It has several datacenters in Europe, which is really a nice, not only this gives us the possibility to deploy your applications in the datacenter that is closest to your users, but we can also create a high availability setup.</p>"},{"location":"cookbook-exoscale/#requirements","title":"Requirements","text":"<p>To follow this cookbook, you need to have the following tools installed:</p> <ul> <li>Kubernetes CLI (kubectl)</li> <li>Exoscale CLI (exo)</li> <li>Cabu (Capsule Builder)</li> </ul> <p>There are several ways to install these tools, but I will show you how to install them on a macOs machine using brew.</p> <ul> <li>kubectl:   <pre><code>brew install kubernetes-cli\n</code></pre></li> <li>exo:   <pre><code>brew tap exoscale/tap\nbrew install exoscale-cli\n</code></pre></li> <li>cabu:   <pre><code>CAPSULE_BUILDER_VERSION=\"v0.0.4\"\nwget -O - https://raw.githubusercontent.com/bots-garden/capsule-function-builder/${CAPSULE_BUILDER_VERSION}/install-capsule-builder.sh | bash\n</code></pre></li> </ul>"},{"location":"cookbook-exoscale/#create-an-sks-cluster-on-exoscale","title":"Create an SKS cluster on Exoscale","text":"<p>As soon as you have created an account, you are able to configure the CLI tool.</p> <pre><code>exo config\n</code></pre> <p>The CLI will guide you in the initial configuration.</p> <p>Now we can create a Kubernetes cluster on Exoscale, in this example we're going to use as CNI <code>Cilium</code>:</p> <pre><code>exo compute security-group create sks-security-group\n\n# Open 30000 to 32767 TCP from all sources for NodePort and LoadBalancer services\nexo compute security-group rule add sks-security-group \\\n--description \"NodePort services\" \\\n--protocol tcp \\\n--network 0.0.0.0/0 \\\n--port 30000-32767\n\n# Open 10250 TCP with the security group as a source\nexo compute security-group rule add sks-security-group \\\n--description \"SKS kubelet\" \\\n--protocol tcp \\\n--port 10250 \\\n--security-group sks-security-group\n\n# Open PING (ICMP type 8 &amp; code 0) with the security group as a source for health checks\nexo compute security-group rule add sks-security-group \\\n--description \"Cilium (healthcheck)\" \\\n--protocol icmp \\\n--icmp-type 8 \\\n--icmp-code 0 \\\n--security-group sks-security-group\n\n# Open 8472 UDP with the security group as a source for VXLAN communication between nodes\nexo compute security-group rule add sks-security-group \\\n--description \"Cilium (vxlan)\" \\\n--protocol udp \\\n--port 8472 \\\n--security-group sks-security-group\n\n# 4240 TCP with the security group as a source for network connectivity health API (health-checks)\nexo compute security-group rule add sks-security-group \\\n--description \"Cilium (healthcheck)\" \\\n--protocol tcp \\\n--port 4240 \\\n--security-group sks-security-group\n\nCLUSTER_NAME=\"swiss-alps\"\nCLUSTER_NODES=1\nCLUSTER_ZONE=\"de-fra-1\"\n# Create the cluster\nexo compute sks create ${CLUSTER_NAME} \\\n--zone ${CLUSTER_ZONE} \\\n--cni cilium \\\n--service-level pro \\\n--nodepool-name swiss-alps-nodepool \\\n--nodepool-size ${CLUSTER_NODES} \\\n--nodepool-security-group sks-security-group\n\n# Get the kubeconfig\nexo compute sks kubeconfig ${CLUSTER_NAME} kube-admin \\\n--zone ${CLUSTER_ZONE} \\\n--group system:masters &gt; ${CLUSTER_NAME}.kubeconfig\n\nexport KUBECONFIG=${CLUSTER_NAME}.kubeconfig\n</code></pre> <p>Output:</p> <pre><code> \u2714 Creating Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                      \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e \u2502\n\u2502 Name             \u2502 sks-security-group                   \u2502\n\u2502 Description      \u2502                                      \u2502\n\u2502 Ingress Rules    \u2502 -                                    \u2502\n\u2502 Egress Rules     \u2502 -                                    \u2502\n\u2502 External Sources \u2502 -                                    \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Adding rule to Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                                                                              \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e                                                         \u2502\n\u2502 Name             \u2502 sks-security-group                                                                           \u2502\n\u2502 Description      \u2502                                                                                              \u2502\n\u2502 Ingress Rules    \u2502                                                                                              \u2502\n\u2502                  \u2502   3b45b19d-e488-41d6-b78b-1a2410d6b16e   NodePort services   TCP   0.0.0.0/0   30000-32767   \u2502\n\u2502                  \u2502                                                                                              \u2502\n\u2502 Egress Rules     \u2502 -                                                                                            \u2502\n\u2502 External Sources \u2502 -                                                                                            \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Adding rule to Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                                                                                          \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e                                                                     \u2502\n\u2502 Name             \u2502 sks-security-group                                                                                       \u2502\n\u2502 Description      \u2502                                                                                                          \u2502\n\u2502 Ingress Rules    \u2502                                                                                                          \u2502\n\u2502                  \u2502   00ce6538-ea7d-40ba-bd7a-5bf3e30c82ad   SKS kubelet         TCP   SG:sks-security-group   10250         \u2502\n\u2502                  \u2502   3b45b19d-e488-41d6-b78b-1a2410d6b16e   NodePort services   TCP   0.0.0.0/0               30000-32767   \u2502\n\u2502                  \u2502                                                                                                          \u2502\n\u2502 Egress Rules     \u2502 -                                                                                                        \u2502\n\u2502 External Sources \u2502 -                                                                                                        \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Adding rule to Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                                                                                                     \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e                                                                                \u2502\n\u2502 Name             \u2502 sks-security-group                                                                                                  \u2502\n\u2502 Description      \u2502                                                                                                                     \u2502\n\u2502 Ingress Rules    \u2502                                                                                                                     \u2502\n\u2502                  \u2502   00ce6538-ea7d-40ba-bd7a-5bf3e30c82ad   SKS kubelet            TCP    SG:sks-security-group   10250                \u2502\n\u2502                  \u2502   3b45b19d-e488-41d6-b78b-1a2410d6b16e   NodePort services      TCP    0.0.0.0/0               30000-32767          \u2502\n\u2502                  \u2502   f79c6e84-f430-4a0c-b9e7-a778a86c6db6   Cilium (healthcheck)   ICMP   SG:sks-security-group   ICMP code:0 type:8   \u2502\n\u2502                  \u2502                                                                                                                     \u2502\n\u2502 Egress Rules     \u2502 -                                                                                                                   \u2502\n\u2502 External Sources \u2502 -                                                                                                                   \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Adding rule to Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                                                                                                     \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e                                                                                \u2502\n\u2502 Name             \u2502 sks-security-group                                                                                                  \u2502\n\u2502 Description      \u2502                                                                                                                     \u2502\n\u2502 Ingress Rules    \u2502                                                                                                                     \u2502\n\u2502                  \u2502   00ce6538-ea7d-40ba-bd7a-5bf3e30c82ad   SKS kubelet            TCP    SG:sks-security-group   10250                \u2502\n\u2502                  \u2502   3b45b19d-e488-41d6-b78b-1a2410d6b16e   NodePort services      TCP    0.0.0.0/0               30000-32767          \u2502\n\u2502                  \u2502   f79c6e84-f430-4a0c-b9e7-a778a86c6db6   Cilium (healthcheck)   ICMP   SG:sks-security-group   ICMP code:0 type:8   \u2502\n\u2502                  \u2502   770ff5d5-4d80-49dd-81c9-64c7135e656b   Cilium (vxlan)         UDP    SG:sks-security-group   8472                 \u2502\n\u2502                  \u2502                                                                                                                     \u2502\n\u2502 Egress Rules     \u2502 -                                                                                                                   \u2502\n\u2502 External Sources \u2502 -                                                                                                                   \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Adding rule to Security Group \"sks-security-group\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SECURITY GROUP  \u2502                                                                                                                     \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID               \u2502 acdaaf51-c2f1-402b-87aa-6b9be44b0e6e                                                                                \u2502\n\u2502 Name             \u2502 sks-security-group                                                                                                  \u2502\n\u2502 Description      \u2502                                                                                                                     \u2502\n\u2502 Ingress Rules    \u2502                                                                                                                     \u2502\n\u2502                  \u2502   00ce6538-ea7d-40ba-bd7a-5bf3e30c82ad   SKS kubelet            TCP    SG:sks-security-group   10250                \u2502\n\u2502                  \u2502   3b45b19d-e488-41d6-b78b-1a2410d6b16e   NodePort services      TCP    0.0.0.0/0               30000-32767          \u2502\n\u2502                  \u2502   00fd91cc-9a61-4a07-9dcf-7ba8f5f5bd03   Cilium (healthcheck)   TCP    SG:sks-security-group   4240                 \u2502\n\u2502                  \u2502   f79c6e84-f430-4a0c-b9e7-a778a86c6db6   Cilium (healthcheck)   ICMP   SG:sks-security-group   ICMP code:0 type:8   \u2502\n\u2502                  \u2502   770ff5d5-4d80-49dd-81c9-64c7135e656b   Cilium (vxlan)         UDP    SG:sks-security-group   8472                 \u2502\n\u2502                  \u2502                                                                                                                     \u2502\n\u2502 Egress Rules     \u2502 -                                                                                                                   \u2502\n\u2502 External Sources \u2502 -                                                                                                                   \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n \u2714 Creating SKS cluster \"swiss-alps\"... 1m12s\n \u2714 Adding Nodepool \"swiss-alps-nodepool\"... 3s\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502  SKS CLUSTER  \u2502                                                                  \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 ID            \u2502 29c1bf5b-5219-497f-a041-6e718ed535d4                             \u2502\n\u2502 Name          \u2502 swiss-alps                                                       \u2502\n\u2502 Description   \u2502                                                                  \u2502\n\u2502 Zone          \u2502 de-fra-1                                                         \u2502\n\u2502 Creation Date \u2502 2022-12-21 19:31:12 +0000 UTC                                    \u2502\n\u2502 Endpoint      \u2502 https://xxx.sks-de-fra-1.exo.io \u2502\n\u2502 Version       \u2502 1.26.0                                                           \u2502\n\u2502 Service Level \u2502 pro                                                              \u2502\n\u2502 CNI           \u2502 cilium                                                           \u2502\n\u2502 Add-Ons       \u2502 exoscale-cloud-controller                                        \u2502\n\u2502               \u2502 metrics-server                                                   \u2502\n\u2502 State         \u2502 running                                                          \u2502\n\u2502 Labels        \u2502 n/a                                                              \u2502\n\u2502 Nodepools     \u2502 4bf4d5ab-fc39-4a42-a9f5-45a5887147ee | swiss-alps-nodepool       \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n</code></pre> <p>You can now use the <code>kubectl</code> command to interact with your cluster:</p> <pre><code>export KUBECONFIG=${CLUSTER_NAME}.kubeconfig\nkubectl get nodes\n</code></pre> <p>And you should see something like this:</p> <pre><code>NAME               STATUS   ROLES    AGE   VERSION\npool-11cb8-djvbs   Ready    &lt;none&gt;   95s   v1.26.0\n</code></pre>"},{"location":"cookbook-exoscale/#create-a-new-capsule-function","title":"Create a new Capsule function","text":"<p>We're going to use the <code>cabu</code> cli to create a new function.</p> <pre><code>cabu generate service-get hello-swiss-robot\n</code></pre> <p>You should see something like this:</p> <pre><code>Unable to find image 'k33g/capsule-builder:0.0.4' locally\n0.0.4: Pulling from k33g/capsule-builder\nff12a8b5aa85: Pull complete\nafe5a53d5555: Pull complete\naa0b3dfc8ee1: Pull complete\ne5320b25a8f8: Pull complete\n6b9621a83b69: Pull complete\na50259c3276d: Pull complete\n0d14b5adb1b9: Pull complete\n0e019d286d0c: Pull complete\nDigest: sha256:17649d47bcd43df4c9738323d0a8dc68a47d90b8c64639394a801d7a943907f2\nStatus: Downloaded newer image for k33g/capsule-builder:0.0.4\nWARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested\n\u2705\ud83d\ude42 hello-swiss-robot function generated\n</code></pre> <p>This generated a new folder <code>hello-swiss-robot</code> with a <code>go.mod</code> file and a <code>hello-swiss-robot.go</code> file.</p> <p>Open the <code>hello-swiss-robot.go</code> file and replace the content with this:</p> <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"github.com/mattes/go-asciibot\"\n\"github.com/tidwall/gjson\"\n)\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(req hf.Request) (resp hf.Response, errResp error) {\nrobot := gjson.Get(req.Body, \"robot\")\nheaders := map[string]string{\n\"Content-Type\": \"text/plain\",\n}\nresp = hf.Response{\nBody:    asciibot.MustGenerate(robot.Str),\nHeaders: headers,\n}\nreturn resp, nil\n}\n</code></pre> <p>And modify the <code>go.mod</code> file to add this line:</p> <pre><code>module hello-swiss-robot\ngo 1.18\nrequire (\ngithub.com/bots-garden/capsule/capsulemodule v0.3.0\ngithub.com/mattes/go -asciibot v0.0.0-20190603170252-3fa6d766c482\ngithub.com/tidwall/gjson v1.14.4\n)\n</code></pre> <p>To build the function, we will need a <code>Dockerfile</code>. Create a new file named <code>Dockerfile</code> and add this content:</p> <pre><code>FROM k33g/capsule-builder:0.0.4\nCOPY go.mod ./\nCOPY hello-swiss-robot.go ./\nRUN  go get -u ./...; go mod tidy;\nRUN tinygo build -o hello-swiss-robot.wasm -target wasi hello-swiss-robot.go\n\nFROM k33g/capsule-launcher:0.2.9\nCOPY --from=0 /home/function/hello-swiss-robot.wasm ./\nEXPOSE 8080\nCMD [\"/capsule\", \"-wasm=./hello-swiss-robot.wasm\", \"-mode=http\", \"-httpPort=8080\"]\n</code></pre> <p>We can now build the function thanks to the <code>Dockerfile</code> and its multi-stage capabilities:</p> <pre><code>IMAGE_NAME=\"capsule-hello-swiss-robot\"\nIMAGE_TAG=\"1.0.0\"\ndocker login ...\ndocker build -t ${IMAGE_NAME} .\n\ndocker images | grep ${IMAGE_NAME}\n</code></pre> <p>Finally, we push the image to the Docker Hub:</p> <pre><code>IMAGE_NAME=\"capsule-hello-swiss-robot\"\nIMAGE_TAG=\"1.0.0\"\ndocker tag ${IMAGE_NAME} ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\ndocker push ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\n</code></pre>"},{"location":"cookbook-exoscale/#test-the-function-locally","title":"Test the function locally","text":"<p>We can now test the function locally:</p> <pre><code>IMAGE_NAME=\"capsule-hello-swiss-robot\"\nIMAGE_TAG=\"1.0.0\"\ndocker run -p 8080:8080 ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\n\ud83d\udc8a Capsule ( v0.2.9 \ud83c\udf84 [Christmas tree] ) http server is listening on: 8080 \ud83c\udf0d\n</code></pre> <p>Now let's test the function, we pass a JSON object to the function, with a <code>robot</code> field. This field is a 5 digit hexadecimal number, which will be used to generate the robot.</p> <pre><code>curl -X POST http://localhost:8080 \\\n-H 'content-type: application/json' \\\n-d '{\"robot\": \"10333\"}'\n\\.===./\n    | d b |\n\\_O_/\n    /| []|\\\n()/|___|\\()\n// \\\\\n_\\\\ //_\n</code></pre>"},{"location":"cookbook-exoscale/#deploy-the-function-on-the-sks-cluster","title":"Deploy the function on the SKS cluster","text":"<p>We can now deploy the function on the SKS cluster. For this I will use the <code>kubectl</code> commands. You can also crate all the Kubernetes resources as YAML files and use <code>kubectl apply -f ...</code>.</p> <pre><code>IMAGE_NAME=\"capsule-hello-swiss-robot\"\nIMAGE_TAG=\"1.0.0\"\nkubectl create deployment hello-swiss-robot-deployment --image ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG} --port 8080\nkubectl expose deployment hello-swiss-robot-deployment --port=8080 --target-port=8080 --type=LoadBalancer\n</code></pre>"},{"location":"cookbook-exoscale/#call-the-function","title":"Call the function","text":"<p>Let's get the IP address of the service using the <code>kubectl</code> command:</p> <pre><code>kubectl get service hello-swiss-robot-deployment -o jsonpath=\"{.status.loadBalancer.ingress[].ip}\"\n</code></pre> <p>And we test the function, to display a new robot:</p> <pre><code>```bash\ncurl -X POST http://&lt;IP_ADDRESS&gt;:8080 \\\n-H 'content-type: application/json' \\\n-d '{\"robot\": \"10233\"}'\n</code></pre> <p>And you should see something like this:</p> <pre><code>    \\.===./\n    | d b |\n\\_O_/\n    /| []|\\\n()/|___|\\()\n. \\_/  .\n   . .:::.. .\n</code></pre> <p>And try another roboter with another hexadecimal number:</p> <pre><code>curl -X POST http://&lt;IP_ADDRESS&gt;:8080 \\\n-H 'content-type: application/json' \\\n-d '{\"robot\": \"f2b11\"}'\n_ _,_,_ _\n   \\( p q )/\n     \\_=_/\n    /|(\\)|\\\nd |___| b\n     (_|_)\n(o|o)\n</code></pre> <p>And that's it! You successfully deployed a Capsule function on a Exoscale SKS cluster.</p>"},{"location":"cookbook-exoscale/#housekeeping","title":"Housekeeping","text":"<p>How to delete the cluster?</p> <pre><code>exo compute sks nodepool delete ${CLUSTER_NAME} swiss-alps-nodepool -z ${CLUSTER_ZONE}\nexo compute sks delete ${CLUSTER_NAME}\nexo compute security-group delete sks-security-group\n</code></pre>"},{"location":"cookbook-fly/","title":"\ud83e\udd58 CookBook","text":""},{"location":"cookbook-fly/#deploy-a-capsule-function-on-flyio","title":"Deploy a Capsule function on Fly.io","text":"<p>What is Fly.io?</p> <p>Fly is a platform for running full stack apps and databases. It's a very very easy way to deploy a container.</p>"},{"location":"cookbook-fly/#requirements","title":"Requirements","text":"<p>First, you need an account on Fly.io, then you will need to install some tools.</p> <p>The install commands I used were tested on macOs and Ubuntu. I'm using brew, but there are severeal other ways to install all the needed tools.</p> <ul> <li>flyctl, the Fly.io CLI:   <pre><code>brew install superfly/tap/flyctl\n</code></pre></li> </ul> <p>Get your token from your Fly.io account, and set a <code>FLY_ACCESS_TOKEN</code> variable with the token's value.</p>"},{"location":"cookbook-fly/#create-a-new-capsule-function","title":"Create a new Capsule function","text":"<p>hello.go: <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"github.com/tidwall/gjson\"\n\"github.com/tidwall/sjson\"\n)\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(request hf.Request) (response hf.Response, errResp error) {\nname := gjson.Get(request.Body, \"name\")\nheadersResp := map[string]string{\n\"Content-Type\": \"application/json; charset=utf-8\",\n}\njsondoc := `{\"message\": \"\"}`\njsondoc, _ = sjson.Set(jsondoc, \"message\", \"\ud83d\udc4b hello \" + name.Str)\nreturn hf.Response{Body: jsondoc, Headers: headersResp}, nil\n}\n</code></pre></p> <p>go.mod: <pre><code>module hello\n\ngo 1.18\n</code></pre></p>"},{"location":"cookbook-fly/#dockerize-the-function","title":"Dockerize the function","text":"<p>In the directory of the function, create a <code>Dockerfile</code>:</p> <p>Dockerfile: <pre><code>FROM k33g/capsule-launcher:0.3.0\nADD hello.wasm ./\nEXPOSE 8080\nCMD [\"/capsule\", \"-wasm=./hello.wasm\", \"-mode=http\", \"-httpPort=8080\"]\n</code></pre></p>"},{"location":"cookbook-fly/#build-the-function","title":"Build the function","text":"<p>Then build the wasm module with TinyGo <pre><code>tinygo build -o hello.wasm -scheduler=none -target wasi ./hello.go\n</code></pre></p> <p>If you don't want to install all the toolchain (Go, TinyGo)</p> <p>you can install CaBu and compile the wasm module like this: <pre><code>cabu build . hello.go hello.wasm\n</code></pre> or use multi-stage builds to first build the wasm function and then to create the smallest image as possible to serve the function. \ud83d\udc40 Look at Capsule function on Civo.</p>"},{"location":"cookbook-fly/#build-and-push-the-docker-image","title":"Build and push the Docker image","text":""},{"location":"cookbook-fly/#build-the-docker-image","title":"Build the Docker image","text":"<p>Type the below commands to build the Docker image: <pre><code>IMAGE_NAME=\"capsule-hello-demo\"\nIMAGE_TAG=\"0.0.0\"\ndocker build -t ${IMAGE_NAME} .\n</code></pre></p> <p>Test it</p> <p>Run the below command: <pre><code>docker run -p 8080:8080 -it ${IMAGE_NAME}\n</code></pre> Then call the function: <pre><code>curl -X POST http://localhost:8080 \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"Bob\"}'\n</code></pre> You should get: <code>{\"message\":\"\ud83d\udc4b hello Bob\"}</code></p>"},{"location":"cookbook-fly/#push-the-docker-image-to-the-docker-hub","title":"Push the Docker image to the Docker Hub","text":"<p>Type the below commands to publish the Docker image: <pre><code>IMAGE_NAME=\"capsule-hello-demo\"\nIMAGE_TAG=\"0.0.0\"\ndocker login -u ${DOCKER_USER} -p ${DOCKER_PWD}\ndocker tag ${IMAGE_NAME} ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\ndocker push ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}\n</code></pre></p>"},{"location":"cookbook-fly/#deploy-the-function-on-flyio","title":"\ud83d\ude80 Deploy the function on Fly.io","text":"<p>Before the first deployment, you need to create the application on Fly.io: <pre><code># Create the application, only at the first deployment\nAPPLICATION_NAME=\"capsule-hello-demo\"\nflyctl apps create ${APPLICATION_NAME} --json\n</code></pre></p> <p>And then, run the below commands to deploy the function:</p> <pre><code>IMAGE_NAME=\"capsule-hello-demo\"\nIMAGE_TAG=\"0.0.0\"\nAPPLICATION_NAME=\"capsule-hello-demo\"\nflyctl deploy \\\n--app ${APPLICATION_NAME} \\\n--image ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG} \\\n--verbose --json\n</code></pre> <p>Output: <pre><code>==&gt; Verifying app config\n--&gt; Verified app config\n==&gt; Building image\nSearching for image 'k33g/capsule-hello-demo:0.0.0' remotely...\nimage found: img_ox20prmgxx3vj1zq\n==&gt; Creating release\n--&gt; release v2 created\n\n--&gt; You can detach the terminal anytime without stopping the deployment\n==&gt; Monitoring deployment\n\n1 desired, 1 placed, 0 healthy, 0 unhealthy [health checks: 1 total, 1 pa\n 1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total, 1 pa\n 1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total, 1 passing]\n--&gt; v0 deployed successfully\n</code></pre></p> <p>The function is deployed \ud83c\udf89</p>"},{"location":"cookbook-fly/#test-the-function","title":"Test the function","text":"<p>Run the below commands: <pre><code>APPLICATION_NAME=\"capsule-hello-demo\"\n# The function url follows the following form:\nURL=\"https://${{APPLICATION_NAME}}.fly.dev\"\ncurl -X POST ${URL} \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"Bob\"}'\n</code></pre> You should get: <code>{\"message\":\"\ud83d\udc4b hello Bob\"}</code></p> <p>\ud83c\udf89 Fly.io is an excellent option for deploying a container with ease.</p>"},{"location":"first-cli-function/","title":"Developer Guide","text":""},{"location":"first-cli-function/#first-cli-function","title":"First CLI function","text":"<p>Create a <code>go.mod</code> file: (<code>go mod init cli-say-hello</code>) <pre><code>module cli-say-hello\n\ngo 1.18\n</code></pre></p> <p>Install the Capsule dependencies: <pre><code>go get github.com/bots-garden/capsule/capsulemodule/hostfunctions\n</code></pre></p> <p>Create a <code>hello.go</code> file: <pre><code>package main\nimport hf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n// main is required.\nfunc main() {\nhf.SetHandle(Handle)\n}\nfunc Handle(params []string) (string, error) {\nvar err error\nfor _, param := range params {\nhf.Log(\"- parameter is: \" + param)\n}\nret := \"The first parameter is: \" + params[0]\nreturn ret, err // err = nil\n}\n</code></pre></p> <ul> <li><code>hf.SetHandle(Handle)</code> defines the called wasm function</li> <li><code>hf.Log(string)</code> prints a value</li> </ul> <p>Build the wasm module: <pre><code>tinygo build -o hello.wasm -scheduler=none --no-debug -target wasi ./hello.go\n</code></pre></p> <p>Execute the <code>Handle</code> function: <pre><code>./capsule \\\n-wasm=./hello.wasm \\\n-mode=cli \\\n\"\ud83d\udc4b hello world \ud83c\udf0d\ud83c\udf83\" 1234 \"Bob Morane\"\n</code></pre></p> <ul> <li><code>-wasm</code> flag: the path to the wasm file</li> <li><code>-mode</code> execution mode</li> </ul> <p>output: <pre><code>- parameter is: \ud83d\udc4b hello world \ud83c\udf0d\ud83c\udf83\n- parameter is: 1234\n- parameter is: Bob Morane\nThe first parameter is: \ud83d\udc4b hello world \ud83c\udf0d\ud83c\udf83\n</code></pre></p>"},{"location":"first-http-function/","title":"Developer Guide","text":""},{"location":"first-http-function/#first-http-function","title":"First HTTP function","text":"<p>Create a <code>go.mod</code> file: (<code>go mod init http-say-hello</code>) <pre><code>module http-say-hello\n\ngo 1.18\n</code></pre></p> <p>To serve the function through http, you need to change the signature of the <code>Handle</code> function:</p> <pre><code>package main\nimport hf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n// main is required.\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(request hf.Request) (response hf.Response, errResp error) {\nhf.Log(\"\ud83d\udcdd Body: \" + request.Body)\n// Read the request headers\nhf.Log(\"Content-Type: \" + request.Headers[\"Content-Type\"])\nhf.Log(\"Content-Length: \" + request.Headers[\"Content-Length\"])\nhf.Log(\"User-Agent: \" + request.Headers[\"User-Agent\"])\n// Read the MESSAGE environment variable\nenvMessage, err := hf.GetEnv(\"MESSAGE\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 \" + err.Error())\n} else {\nhf.Log(\"Environment variable: \" + envMessage)\n}\n// Set the response content type and add a message header\nheadersResp := map[string]string{\n\"Content-Type\": \"application/json; charset=utf-8\",\n\"Message\":      \"\ud83d\udc4b hello world \ud83c\udf0d\",\n}\njsonResponse := `{\"message\": \"hey people!\"}`\nreturn hf.Response{Body: jsonResponse, Headers: headersResp}, err\n}\n</code></pre> <ul> <li><code>hf.SetHandleHttp(Handle)</code> defines the called wasm function</li> <li><code>hf.Log(string)</code> prints a value</li> <li><code>hf.GetEnv(\"MESSAGE\")</code> get the value of the <code>MESSAGE</code> environment variable</li> </ul> <p>Build the wasm module: <pre><code>tinygo build -o hello.wasm -scheduler=none --no-debug -target wasi ./hello.go\n</code></pre></p> <p>Serve the <code>Handle</code> function: <pre><code>export MESSAGE=\"\ud83d\udd90 good morning \ud83d\ude04\"\n./capsule \\\n-wasm=./hello.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre></p> <p>Call the <code>Handle</code> function: <pre><code>curl -v -X POST \\\nhttp://localhost:8080 \\\n-H 'content-type: application/json; charset=utf-8' \\\n-d '{\"message\": \"TinyGo \ud83d\udc9a wasm\"}'\n</code></pre></p> <p>request output: <pre><code>&gt; POST / HTTP/1.1\n&gt; Host: localhost:8080\n&gt; User-Agent: curl/7.79.1\n&gt; Accept: */*\n&gt; content-type: application/json; charset=utf-8\n&gt; Content-Length: 31\n&gt;\n* Mark bundle as not supporting multiuse\n&lt; HTTP/1.1 200 OK\n&lt; Content-Type: application/json; charset=utf-8\n&lt; Message: \ud83d\udc4b hello world \ud83c\udf0d\n&lt; Date: Sat, 30 Jul 2022 19:17:28 GMT\n&lt; Content-Length: 26\n&lt;\n{\"message\":\"hey people!\"}\n</code></pre></p> <p>log server output: <pre><code>\ud83d\udcdd body: {\"message\":\"TinyGo \ud83d\udc9a wasm\"}\nContent-Type: application/json; charset=utf-8\nContent-Length: 31\nUser-Agent: curl/7.79.1\nEnvironment variable: \ud83d\udd90 good morning \ud83d\ude04\n</code></pre></p>"},{"location":"first-http-function/#onload-function","title":"OnLoad function","text":"<p>If you add an <code>OnLoad</code> exported function to the module, it will be executed at the start of the HTTP launcher (capsule).</p> <p>the <code>main</code> function will be executed too</p> <pre><code>//export OnLoad\nfunc OnLoad() {\nhf.Log(\"\ud83d\udc4b from the OnLoad function\")\n}\n</code></pre> <p>It can be useful to register your wasm service to a backend (Redis, CouchBase, ...)</p>"},{"location":"first-http-function/#onexit-function","title":"OnExit function","text":"<p>If you add an <code>OnExit</code> exported function to the module, it will be executed when you stop the HTTP launcher (capsule).</p> <p>the <code>main</code> function will be executed too</p> <pre><code>//export OnExit\nfunc OnExit() {\nhf.Log(\"\ud83d\udc4b from the OnExit function\")\n}\n</code></pre> <p>It can be useful to unregister your wasm service from a backend (Redis, CouchBase, ...)</p>"},{"location":"first-http-function/#getexiterror-and-getexitcode-function","title":"GetExitError and GetExitCode function","text":"<p>\ud83d\udd90\ud83d\udea7 it's a work in progress (it's not implemented entirely) <pre><code>//export OnExit\nfunc OnExit() {\nhf.Log(\"\ud83d\udc4b\ud83e\udd17 have a nice day\")\nhf.Log(\"Exit Error: \" + hf.GetExitError())\nhf.Log(\"Exit Code: \" + hf.GetExitCode())\n}\n</code></pre></p>"},{"location":"first-http-function/#remote-loading-of-the-wasm-module","title":"Remote loading of the wasm module","text":"<p>You can download the wasm module from a remote location before executing it:</p> <p>For example, provide the wasm file with an HTTP server, run this command at the root of your project: <pre><code>python3 -m http.server 9090\n</code></pre></p> <p>Now you can download the wasm file with this url: http://localhost:9090/hello.wasm</p> <p>Serve the <code>Handle</code> function: <pre><code>export MESSAGE=\"\ud83d\udd90 good morning \ud83d\ude04\"\n./capsule \\\n-url=http://localhost:9090/hello.wasm \\\n-wasm=./tmp/hello.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre></p> <ul> <li><code>-url</code> flag: the download url</li> <li><code>-wasm</code> flag: the path where to save the wasm file</li> </ul>"},{"location":"first-http-function/#get-request","title":"GET Request","text":"<p>Capsule accept the <code>GET</code> requests, so you can serve, for example, HTML:</p> <pre><code>package main\nimport hf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n// main is required.\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(request hf.Request) (response hf.Response, errResp error) {\nhtml := `\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Wasm is fantastic \ud83d\ude0d&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;\ud83d\udc4b Hello World \ud83c\udf0d&lt;/h1&gt;\n            &lt;h2&gt;Served with \ud83d\udc9c with Capsule \ud83d\udc8a&lt;/h2&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    `\nheadersResp := map[string]string{\n\"Content-Type\": \"text/html; charset=utf-8\",\n}\nreturn hf.Response{Body: html, Headers: headersResp}, nil\n}\n</code></pre> <p>Build the wasm module: <pre><code>tinygo build -o hello.wasm -scheduler=none --no-debug -target wasi ./hello.go\n</code></pre></p> <p>Serve the <code>Handle</code> \"function page\": <pre><code>./capsule \\\n-wasm=./hello.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre></p> <p>Now, you can open http://localhost:8080 with your browser or run a curl request: <pre><code>curl http://localhost:8080\n</code></pre></p>"},{"location":"first-mqtt-function/","title":"Developer Guide","text":""},{"location":"first-mqtt-function/#first-mqtt-function","title":"First MQTT function","text":"<p>\ud83d\udd90\ud83d\udea7 The MQTT integration with Capsule is a work in progress and the functions are subject to change</p> <p>MQTT is a standard for IOT message.</p> <ul> <li>About MQTT: https://mqtt.org/</li> </ul>"},{"location":"first-mqtt-function/#requirements","title":"Requirements","text":""},{"location":"first-mqtt-function/#mqtt-server","title":"MQTT Server","text":"<p>You need to install and run a MQTT server. To do so, go to the <code>./mqtt</code> directory of this project and run the docker-compose file</p>"},{"location":"first-mqtt-function/#run-capsule-as-a-mqtt-subscriber","title":"Run Capsule as a MQTT subscriber:","text":"<pre><code>capsule \\\n-wasm=../wasm_modules/capsule-mqtt-subscriber/hello.wasm \\\n-mode=mqtt \\\n-mqttsrv=127.0.0.1:1883 \\\n-topic=topic/sensor0 \\\n-clientId=sensor\n</code></pre> <ul> <li>use the \"MQTT mode\": <code>-mode=mqtt</code></li> <li>define the MQTT topic: <code>-topic=&lt;topic_name&gt;</code></li> <li>define the MQTT clientId: <code>-clientId=&lt;clientId&gt;</code></li> <li>define the address of the MQTT server: <code>-mqttsrv=&lt;mqtt_server:port&gt;</code></li> </ul>"},{"location":"first-mqtt-function/#mqtt-function","title":"MQTT function","text":"<p>A Capsule MQTT function is a subscription to a subject. Capsule is listening on a topic and execute a function every time a message is posted on the subject:</p> <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\nfunc main() {\nhf.OnMqttMessage(Handle) // define the triggered function when a message \"arrives\" on the topic\n}\n// at every message on the subject channel, the `Handle` function is executed\nfunc Handle(params []string) {\n// send a message to another subject\n_, err := hf.MqttPublish(\"topic/reply\", \"it's a wasm module here\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 ouch something bad is happening\")\nhf.Log(err.Error())\n}\n}\n</code></pre>"},{"location":"first-mqtt-function/#capsule-mqtt-publisher","title":"Capsule MQTT publisher","text":"<p>Publish MQTT messages from capsule</p> <p>You can use a WASM Capsule module to MQTT messages, even if Capsule is not started in \"mqtt\" mode, for example from a WASM CLI Capsule module:</p> <pre><code>package main\nimport (\n\"errors\"\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"strings\"\n)\nfunc main() {\nhf.SetHandle(Handle)\n}\nfunc Handle(params []string) (string, error) {\nvar errs []string\n// a new connection is created at every call/publish\n_, err1stMsg := hf.MqttConnectPublish(\"127.0.0.1:1883\", \"sensor\", \"topic/sensor1\", \"\ud83d\udd90 Hello from WASM with MQTT \ud83d\udc9c\")\n_, err2ndMsg := hf.MqttConnectPublish(\"127.0.0.1:1883\", \"sensor\", \"topic/sensor2\", \"\ud83d\udc4b Hello World \ud83c\udf0d\")\nif err1stMsg != nil {\nerrs = append(errs, err1stMsg.Error())\n}\nif err2ndMsg != nil {\nerrs = append(errs, err2ndMsg.Error())\n}\nreturn \"MQTT Rocks!\", errors.New(strings.Join(errs, \"|\"))\n}\n</code></pre> <p>In this use case, you need to define the MQTT server and create a connection</p>"},{"location":"first-nats-function/","title":"Developer Guide","text":""},{"location":"first-nats-function/#first-nats-function","title":"First Nats function","text":"<p>\ud83d\udd90\ud83d\udea7 The NAT integration with Capsule is a work in progress and the functions are subject to change</p> <p>NATS is an open-source messaging system.</p> <ul> <li>About NATS: https://nats.io/ and https://docs.nats.io/</li> <li>Nats Overview: https://docs.nats.io/nats-concepts/overview</li> </ul>"},{"location":"first-nats-function/#requirements","title":"Requirements","text":""},{"location":"first-nats-function/#nats-server","title":"NATS Server","text":"<p>You need to install and run a NATS server: https://docs.nats.io/running-a-nats-service/introduction/installation. Otherwise, I created a Virtual Machine for this; If you have installed Multipass, go to the <code>./nats/vm-nats</code> directory of this project. I created some scripts for my experiments:</p> <ul> <li><code>create-vm.sh</code> create the multipass VM, the settings of the VM are stored in the <code>vm.nats.config</code></li> <li><code>01-install-nats-server.sh</code> install the NATS server inside the VM</li> <li><code>02-start-nats-server.sh</code> start the NATS server</li> <li><code>03-stop-nats-server.sh</code> stop the NATS server</li> <li><code>stop-vm.sh</code> stop the VM</li> <li><code>start-vm.sh</code> start the VM</li> <li><code>destroy-vm.sh</code> delete the VM</li> <li><code>shell-vm.sh</code> SSH connect to the VM</li> </ul>"},{"location":"first-nats-function/#nats-client","title":"NATS Client","text":"<p>You need a NATS client to publish messages. You can find sample of Go and Node.js NATS clients in the <code>./nats/clients</code>.</p>"},{"location":"first-nats-function/#run-capsule-as-a-nats-subscriber","title":"Run Capsule as a NATS subscriber:","text":"<pre><code>capsule \\\n-wasm=../wasm_modules/capsule-nats-subscriber/hello.wasm \\\n-mode=nats \\\n-natssrv=nats.devsecops.fun:4222 \\\n-subject=ping\n</code></pre> <ul> <li>use the \"NATS mode\": <code>-mode=nats</code></li> <li>define the NATS subject: <code>-subject=&lt;subject_name&gt;</code></li> <li>define the address of the NATS server: <code>-natssrv=&lt;nats_server:port&gt;</code></li> </ul>"},{"location":"first-nats-function/#nats-function","title":"NATS function","text":"<p>A Capsule NATS function is a subscription to a subject. Capsule is listening on a subject(like a MQTT topic) and execute a function every time a message is posted on the subject:</p> <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\nfunc main() {\nhf.OnNatsMessage(Handle) // define the triggered function when a message \"arrives\" on the subject/topic\n}\n// at every message on the subject channel, the `Handle` function is executed\nfunc Handle(params []string) {\n// send a message to another subject\n_, err := hf.NatsPublish(\"notify\", \"it's a wasm module here\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 ouch something bad is happening\")\nhf.Log(err.Error())\n}\n}\n</code></pre>"},{"location":"first-nats-function/#capsule-nats-publisher","title":"Capsule NATS publisher","text":"<p>Publish NATS messages from capsule</p> <p>You can use a WASM Capsule module to publish NATS messages, even if Capsule is not started in \"nats\" mode, for example from a WASM CLI Capsule module:</p> <pre><code>package main\nimport (\n\"errors\"\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"strings\"\n)\nfunc main() {\nhf.SetHandle(Handle)\n}\nfunc Handle(params []string) (string, error) {\nvar errs []string\n// a new connection is created at every call/publish\n_, err1stMsg := hf.NatsConnectPublish(\"nats.devsecops.fun:4222\", \"ping\", \"\ud83d\udd90 Hello from WASM with Nats \ud83d\udc9c\")\n_, err2ndMsg := hf.NatsConnectPublish(\"nats.devsecops.fun:4222\", \"notify\", \"\ud83d\udc4b Hello World \ud83c\udf0d\")\nif err1stMsg != nil {\nerrs = append(errs, err1stMsg.Error())\n}\nif err2ndMsg != nil {\nerrs = append(errs, err2ndMsg.Error())\n}\nreturn \"NATS Rocks!\", errors.New(strings.Join(errs, \"|\"))\n}\n</code></pre> <p>In this use case, you need to define the NATS server and create a connection</p>"},{"location":"first-nats-function/#request-and-reply","title":"Request and Reply","text":"<p>A NATS \"publisher\" can make a request to a NATS \"subscriber\" and wait for an answer</p> <pre><code>package main\nimport (\n\"errors\"\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n\"strings\"\n)\nfunc main() {\nhf.SetHandle(Handle)\n}\nfunc Handle(params []string) (string, error) {\n// Publish and wait for an answer; 1 is the timeout in seconds\nres, err := hf.NatsConnectRequest(\"nats.devsecops.fun:4222\", \"notify\", \"\ud83d\udc4b Hello World \ud83c\udf0d\", 1)\nif err != nil {\nhf.Log(\"\ud83d\udd34\" + err.Error())\n} else {\n// Display the answer\nhf.Log(\"\ud83d\udd35\" + res)\n}\nreturn \"NATS Rocks!\", err\n}\n</code></pre> <p>A NATS \"subscriber\" can reply to a request received on its subject</p> <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\nfunc main() {\nhf.OnNatsMessage(Handle)\n}\nfunc Handle(params []string) {\nhf.Log(\"Message on subject: \" + hf.NatsGetSubject() + \", \ud83c\udf89 message: \" + params[0])\n// reply to the message on the current subject; 10 is the timeout in seconds\n_, _ = hf.NatsReply(\"Hey! What's up\", 10)\n}\n</code></pre>"},{"location":"getting-started-cabu-build/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cabu-build/#build-the-hello-world-function-with-cabu","title":"Build the hello-world function with Cabu","text":"<p>For building the WASM function, use the <code>cabu build</code> command:</p> <pre><code>cd hello-world\ncabu build . hello-world.go hello-world.wasm\n</code></pre>"},{"location":"getting-started-cabu-build/#build-the-hello-world-function-with-tinygo","title":"Build the hello-world function with TinyGo","text":"<p>You can build the wasm module without Cabu. But you need to install Go and TinyGo:</p> <pre><code>cd hello-world\ngo mod tidy\ntinygo build -o hello-world.wasm -scheduler=none -target wasi ./hello-world.go\n</code></pre>"},{"location":"getting-started-cabu-gen/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cabu-gen/#generate-a-new-project-function","title":"Generate a new project function","text":"<p>Cabu can generate function project from templates:</p> <pre><code># template name: `service-get`\n# function project name `hello-world`\ncabu generate service-get hello-world\n</code></pre> <p>At the first launch, Cabu will pull a docker image with all the necessary resources to build the WASM function. <pre><code>\ud83d\udc33 using k33g/capsule-builder:0.0.4\nUnable to find image 'k33g/capsule-builder:0.0.4' locally\n0.0.4: Pulling from k33g/capsule-builder\n68c15fb212c3: Pull complete\n28b965d0936e: Pull complete\nf7ba6ae51b0b: Pull complete\nDigest: sha256:47ebf274d7c378d1795f6c8a78d71c45e8368b33a7a3ba8e48ef131a08fd9ac4\nStatus: Downloaded newer image for k33g/capsule-builder:0.0.4\n\u2705\ud83d\ude42 hello-world function generated\n</code></pre></p> <p>Cabu has generated the <code>hello-world</code> project:</p> <pre><code>.\n\u251c\u2500\u2500 hello-world\n\u2502  \u251c\u2500\u2500 go.mod\n\u2502  \u2514\u2500\u2500 hello-world.go\n</code></pre> <p>With the following source code: <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\nfunc main() {\nhf.SetHandleHttp(Handle)\n}\nfunc Handle(req hf.Request) (resp hf.Response, errResp error) {\nheaders := map[string]string{\n\"Content-Type\": \"text/html; charset=utf-8\",\n}\nresp = hf.Response{\nBody: \"&lt;h1&gt;\ud83d\udc4b hello world \ud83c\udf0d&lt;/h1&gt;\",\nHeaders: headers,\n}\nreturn resp , nil\n}\n</code></pre></p>"},{"location":"getting-started-cabu-inst/","title":"\ud83d\ude80 Getting Started","text":"<p>The simplest way to create your first Capsule Function is to use Cabu</p> <p>To write and build wasm function for Capsule, you need to install GoLang and TinyGo. Otherwise, you can use the capsule-function-builder project. It provides a very simple CLI, named capsule-builder or cabu that uses a Docker image with all the necessary resources (Golang and TinyGo compilers).</p>"},{"location":"getting-started-cabu-inst/#install-cabu-capsule-builder","title":"Install Cabu (Capsule Builder)","text":"<pre><code>CAPSULE_BUILDER_VERSION=\"v0.0.4\"\nwget -O - https://raw.githubusercontent.com/bots-garden/capsule-function-builder/${CAPSULE_BUILDER_VERSION}/install-capsule-builder.sh | bash\n</code></pre>"},{"location":"getting-started-cabu-reload/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cabu-reload/#reload-a-deployed-wasm-module-function","title":"Reload a deployed wasm module function","text":"<p>Introduced in Capsule v0.2.9 \ud83e\udd9c [parrot]</p> <p>You can reload the running wasm module by using the <code>/load-wasm-module</code> route of Capsule, like this:</p> <pre><code>curl -v -X POST \\\nhttp://localhost:7070/load-wasm-module \\\n-H 'content-type: application/json; charset=utf-8' \\\n-d '{\"url\": \"http://localhost:9090/hello-two/hello-two.wasm\", \"path\": \"./tmp/hello-two.wasm\"}'\n</code></pre>"},{"location":"getting-started-cabu-reload/#protect-load-wasm-module-with-a-token","title":"Protect <code>/load-wasm-module</code> with a token","text":"<p>To protect the route, start capsule with the <code>CAPSULE_RELOAD_TOKEN</code> variable:</p> <pre><code>CAPSULE_RELOAD_TOKEN=\"ilovepandas\" capsule \\\n-url=http://localhost:9090/hello-one/hello-one.wasm \\\n-wasm=./tmp/hello-one.wasm \\\n-mode=http \\\n-httpPort=7070\n</code></pre> <p>Then, add the token to the headers of the request:</p> <pre><code>curl -v -X POST \\\nhttp://localhost:7070/load-wasm-module \\\n-H 'content-type: application/json; charset=utf-8' \\\n-H 'CAPSULE_RELOAD_TOKEN: ilovepandas' \\\n-d '{\"url\": \"http://localhost:9090/hello-two/hello-two.wasm\", \"path\": \"./tmp/hello-two.wasm\"}'\n</code></pre>"},{"location":"getting-started-cabu-serve-url/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cabu-serve-url/#serve-the-module-frome-an-url","title":"Serve the module frome an url","text":"<p>At start, Capsule can download the module function from an URL, store it to a directory of your choice, and then serve it.</p> <pre><code>capsule \\\n-url=http://localhost:9090/hello-world/hello-world.wasm \\\n-wasm=./tmp/hello-world.wasm \\\n-mode=http \\\n-httpPort=7070\n</code></pre> <p>You can provide a wasm module through HTTP with any HTTP server: <pre><code>python3 -m http.server 9090\n</code></pre> or you can use a wasm registry, like https://wapm.io/</p>"},{"location":"getting-started-cabu-serve/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cabu-serve/#serve-the-hello-world-function","title":"Serve the hello-world function","text":"<p>Before serving the function, you need to install Capsule: see the install section</p>"},{"location":"getting-started-cabu-serve/#serve-the-function","title":"Serve the function","text":"<pre><code>capsule \\\n-wasm=./hello-world.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre> <p>Reach http://localhost:8080 with your browser</p>"},{"location":"getting-started-cabu-serve/#serve-the-function-with-the-capsule-docker-image","title":"Serve the function with the Capsule Docker image","text":"<pre><code>docker run \\\n-p 8080:8080 \\\n-v $(pwd):/app --rm k33g/capsule-launcher:0.3.1 \\\n/capsule \\\n-wasm=./app/hello-world.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre> <p>The Capsule Docker image is an external project: https://github.com/bots-garden/capsule-docker-image</p>"},{"location":"host-functions-couchbase/","title":"Host functions","text":""},{"location":"host-functions-couchbase/#make-couchbase-n1ql-query","title":"Make CouchBase N1QL Query","text":"<p>You need to run Capsule with these four environment variables: <pre><code>COUCHBASE_CLUSTER=\"couchbase://localhost\"\nCOUCHBASE_USER=\"admin\"\nCOUCHBASE_PWD=\"ilovepandas\"\nCOUCHBASE_BUCKET=\"wasm-data\"\n</code></pre></p> <pre><code>bucketName, _ := hf.GetEnv(\"COUCHBASE_BUCKET\")\nquery := \"SELECT * FROM `\" + bucketName + \"`.data.docs\"\njsonStringArray, err := hf.CouchBaseQuery(query)\n</code></pre>"},{"location":"host-functions-env/","title":"Host functions","text":""},{"location":"host-functions-env/#read-value-of-the-environment-variables","title":"Read value of the environment variables","text":"<pre><code>message, err := hf.GetEnv(\"MESSAGE\")\nif err != nil {\nhf.Log(err.Error())\n} else {\nhf.Log(\"MESSAGE=\" + message)\n}\n</code></pre>"},{"location":"host-functions-errors/","title":"Host functions","text":""},{"location":"host-functions-errors/#error-management","title":"Error Management","text":"<p>\ud83d\udd90\ud83d\udd90\ud83d\udd90 \ud83d\udea7 it's a work in progress (it's not implemented entirely)</p> <p><code>GetExitError()</code> &amp; <code>GetExitCode</code>: <pre><code>//export OnExit\nfunc OnExit() {\nhf.Log(\"\ud83d\udc4b\ud83e\udd17 have a nice day\")\nhf.Log(\"Exit Error: \" + hf.GetExitError())\nhf.Log(\"Exit Code: \" + hf.GetExitCode())\n}\n</code></pre></p>"},{"location":"host-functions-files/","title":"Host functions","text":""},{"location":"host-functions-files/#read-and-write-files","title":"Read and Write files","text":"<pre><code>txt, err := hf.ReadFile(\"about.txt\")\nif err != nil {\nhf.Log(err.Error())\n}\nhf.Log(txt)\nnewFile, err := hf.WriteFile(\"hello.txt\", \"\ud83d\udc4b HELLO WORLD \ud83c\udf0d\")\nif err != nil {\nhf.Log(err.Error())\n}\nhf.Log(newFile)\n</code></pre>"},{"location":"host-functions-http/","title":"Host functions","text":""},{"location":"host-functions-http/#make-http-requests","title":"Make HTTP requests","text":"<p><code>GET</code> <pre><code>ret, err := hf.Http(\"https://httpbin.org/get\", \"GET\", headers, \"\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 error:\" + err.Error())\n} else {\nhf.Log(\"\ud83d\udcddresult: \" + ret)\n}\n</code></pre></p> <p><code>POST</code> <pre><code>headers := map[string]string{\"Accept\": \"application/json\", \"Content-Type\": \"text/html; charset=UTF-8\"}\nret, err := hf.Http(\"https://httpbin.org/post\", \"POST\", headers, \"\ud83d\udc4b hello world \ud83c\udf0d\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 error:\" + err.Error())\n} else {\nhf.Log(\"\ud83d\udcddresult: \" + ret)\n}\n</code></pre></p>"},{"location":"host-functions-intro/","title":"Host functions","text":"<p>\ud83d\udea7 this is a work in progress, each host function will be detailed with samples in the coming weeks.</p> <p>Capsule offers some capabilities to the wasm modules by providing some \"host functions\":</p>"},{"location":"host-functions-log/","title":"Host functions","text":""},{"location":"host-functions-log/#print-a-message","title":"Print a message","text":"<pre><code>hf.Log(\"\ud83d\udc4b Hello World \ud83c\udf0d\")\n</code></pre>"},{"location":"host-functions-memory/","title":"Host functions","text":""},{"location":"host-functions-memory/#use-memory-cache","title":"Use memory cache","text":"<p><code>MemorySet</code> <pre><code>_, err := hf.MemorySet(\"message\", \"\ud83d\ude80 hello is started\")\n</code></pre></p> <p><code>MemoryGet</code> <pre><code>value, err := hf.MemoryGet(\"message\")\n</code></pre></p> <p><code>MemoryKeys</code> <pre><code>keys, err := hf.MemoryKeys()\n// it will return an array of strings\nif err != nil {\nhf.Log(err.Error())\n}\nfor _, value := range keys {\nhf.Log(\"key: \"+value)\n}\n</code></pre></p>"},{"location":"host-functions-mqtt/","title":"Host functions","text":""},{"location":"host-functions-mqtt/#mqtt","title":"MQTT","text":"<p>You must use the <code>\"mqtt\"</code> mode of Capsule as the MQTT connection is defined at the start of Capsule and shared with the WASM module:</p> <pre><code>capsule \\\n-wasm=../wasm_modules/capsule-mqtt-subscriber/hello.wasm \\\n-mode=mqtt \\\n-mqttsrv=127.0.0.1:1883 \\\n-topic=topic/sensor0 \\\n-clientId=sensor_id1\n</code></pre>"},{"location":"host-functions-mqtt/#mqtt-handler-as-a-subscriber","title":"MQTT Handler as a Subscriber","text":"<p>\ud83d\udd90 you have to call <code>hf.OnMqttMessage(Handle)</code> from the <code>main</code> function.</p> <pre><code>package main\nimport (\nhf \"github.com/bots-garden/capsule/capsulemodule/hostfunctions\"\n)\n// the topic is defined when launching the capsule launcher\nfunc main() {\nhf.OnMqttMessage(Handle)\n}\nfunc Handle(params []string) {\nmessage := params[0]\nhf.Log(\"\ud83d\udc4b you get a message on topic \" + hf.MqttGetTopic() + \": \" + message)\n// we use the connection of the launcher (capsule)\n_, err := hf.MqttPublish(\"topic/reply\", \"it's a wasm module here\")\nif err != nil {\nhf.Log(\"\ud83d\ude21 ouch something bad is happening\")\nhf.Log(err.Error())\n}\n}\n</code></pre>"},{"location":"host-functions-nats/","title":"Host functions","text":""},{"location":"host-functions-nats/#nats","title":"Nats","text":"<p><code>NatsPublish(subject string, message string)</code>: publish a message on a subject <pre><code>_, err := hf.NatsPublish(\"notify\", \"it's a wasm module here\")\n</code></pre></p> <p>You must use the <code>\"nats\"</code> mode of Capsule as the NATS connection is defined at the start of Capsule and shared with the WASM module:</p> <pre><code>capsule \\\n-wasm=../wasm_modules/capsule-nats-subscriber/hello.wasm \\\n-mode=nats \\\n-natssrv=nats.devsecops.fun:4222 \\\n-subject=ping\n</code></pre> <p><code>NatsReply(message string, timeout uint32)</code>: publish a message on the current subject and wait for an answer <pre><code>_, err := hf.NatsReply(\"it's a wasm module here\", 10)\n</code></pre></p> <p>You must use the <code>\"nats\"</code> mode of Capsule as the NATS connection and the subscription are defined at the start of Capsule and shared with the WASM module.</p> <p><code>NatsGetSubject()</code>: get the subject listened by the Capsule launcher <pre><code>hf.Log(\"\ud83d\udc42Listening on: \" + hf.NatsGetSubject())\n</code></pre></p> <p><code>NatsGetServer()</code>: get the connected NATS server <pre><code>hf.Log(\"\ud83d\udc4b NATS server: \" + hf.NatsGetServer())\n</code></pre></p> <p><code>NatsConnectPublish(server string, subject string, message string)</code>: connect to a NATS server and send a message on a subject <pre><code>_, err := hf.NatsConnectPublish(\"nats.devsecops.fun:4222\", \"ping\", \"\ud83d\udd90 Hello from WASM with Nats \ud83d\udc9c\")\n</code></pre></p> <p>You can use this function with all the running modes of Capsule</p> <p><code>NatsConnectPublish(server string, subject string, message string, timeout uint32)</code>: connect to a NATS server and send a message on a subject <pre><code>answer, err := hf.NatsConnectRequest(\"nats.devsecops.fun:4222\", \"notify\", \"\ud83d\udc4b Hello World \ud83c\udf0d\", 1)\n</code></pre></p> <p>You can use this function with all the running modes of Capsule</p>"},{"location":"host-functions-redis/","title":"Host functions","text":""},{"location":"host-functions-redis/#make-redis-queries","title":"Make Redis queries","text":"<p>\ud83d\udea7 this is a work in progress</p> <p>You need to run Capsule with these two environment variables: <pre><code>REDIS_ADDR=\"localhost:6379\"\nREDIS_PWD=\"\"\n</code></pre></p> <p><code>SET</code> <pre><code>// add a key, value\nres, err := hf.RedisSet(\"greetings\", \"Hello World\")\nif err != nil {\nhf.Log(err.Error())\n} else {\nhf.Log(\"Value: \" + res)\n}\n</code></pre></p> <p><code>GET</code> <pre><code>// read the value\nres, err := hf.RedisGet(\"greetings\")\nif err != nil {\nhf.Log(err.Error())\n} else {\nhf.Log(\"Value: \" + res)\n}\n</code></pre></p> <p><code>KEYS</code> <pre><code>legion, err := hf.RedisKeys(\"bob*\")\nif err != nil {\nhf.Log(err.Error())\n}\nfor _, bob := range legion {\nhf.Log(bob)\n}\n</code></pre></p>"},{"location":"install/","title":"Install Capsule","text":"<p>Before executing or running a function, you need to install the last release of Capsule:</p> <p>The script will install Capsule in <code>$HOME/.local/bin</code> if you want to install Capsule somewhere else, override the <code>CAPSULE_PATH</code> variable (default value: <code>CAPSULE_PATH=\"$HOME/.local/bin\"</code>)</p> <p>\ud83d\udd90 On Linux:</p> <pre><code>export CAPSULE_VERSION=\"v0.3.1\"\nwget -O - https://raw.githubusercontent.com/bots-garden/capsule/${CAPSULE_VERSION}/install-capsule-launcher.sh| bash\n</code></pre> <p>\ud83d\udd90 On macOS:</p> <ul> <li>create the <code>$HOME/.local/bin</code> directory</li> <li>add it to your path: <pre><code>export CAPSULE_RUNNER_PATH=\"$HOME/.local\"\nexport PATH=\"$CAPSULE_RUNNER_PATH/bin:$PATH\"\n</code></pre></li> </ul> <p>Then you can serve a wasm function like this:</p> <pre><code>MESSAGE=\"\ud83d\udc4b Hello World \ud83c\udf0d\" capsule \\\n-wasm=./app/index.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre> <p>You can download the appropriate release of Capsule here: <code>v0.3.1 \ud83d\udc0a [Tampa Bay]</code></p>"},{"location":"install/#using-the-capsule-docker-image","title":"Using the Capsule Docker image","text":"<p>The documentation is a wip \ud83d\udea7</p> <p>A \"scratch\" Docker image of Capsule exists on https://hub.docker.com/r/k33g/capsule-launcher/tags. You can find more details on the capsule-docker-image project.</p> <p>This image will be used to deploy Capsule to CaaS or Kubernetes. You can use it directly to run a wasm function without installing Capsule:</p> <pre><code>docker run \\\n-p 8080:8080 \\\n-e MESSAGE=\"\ud83d\udc4b Hello World \ud83c\udf0d\" \\\n-v $(pwd):/app --rm k33g/capsule-launcher:0.3.1 \\\n/capsule \\\n-wasm=./app/index.wasm \\\n-mode=http \\\n-httpPort=8080\n</code></pre> <p>\ud83d\udc4b You will find some running examples with these projects:</p> <ul> <li>https://github.com/bots-garden/capsule-launcher-demo</li> <li>https://github.com/bots-garden/capsule-hello-universe</li> </ul> <p>Old samples to be updated:</p> <ul> <li>https://github.com/bots-garden/capsule-samples</li> <li>https://github.com/bots-garden/capsule-on-fly-dot-io</li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"references/#blog-posts","title":"Blog posts","text":"<ul> <li>Create a GitLab bot with a Capsule Wasm function in less than 100 lines of code</li> <li>Deploy Capsule Functions on Fly.io in a flash</li> <li>A simple calc serverless function with Capsule, NATS and Node.js</li> <li>Host and Serve a Lit SPA with WebAssembly (and Capsule)</li> <li>Capsule, my personal wasm FaaS (part 2)</li> <li>Capsule, my personal wasm multi-tools knife (part 1)</li> <li>Extend Wasm with host functions thanks to Wazero</li> <li>An essay on the bi-directional exchange of strings between the Wasm module (with TinyGo) and Node.js (with WASI support)</li> </ul>"}]}