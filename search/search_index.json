{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsule Project: the nano wasm runners","text":"<p>What's new?</p> <ul> <li><code>v0.3.4 \ud83c\udf4b [lemon]</code>: Capsule next generation (performances: x 10 \ud83d\ude80)</li> <li>\ud83c\udf0d Downloads: https://github.com/bots-garden/capsule/releases/tag/v0.3.4</li> <li>\ud83e\udd1a With the previous version of the project, Capsule was an only one application to run as an HTTP server, a CLI, a NATS subscriber and publisher and a MQTT subscriber and publisher. In the future, we will reintroduce the capabilities of NATS and MQTT, but with separate runners.</li> </ul>"},{"location":"#what-is-the-capsule-project","title":"What is the Capsule project?","text":"<p>Capsule is a set of WASM runners. Right now, the Capsule project is composed of:</p> <ul> <li>Capsule CLI: to simply execute a WebAssembly module in a terminal</li> <li>Capsule HTTP server to serve a WebAssembly module like a micro service or a function.</li> </ul> <ul> <li>Capsule applications are developed with GoLang and thanks to the \ud83d\udc9c Wazero project. </li> <li>The wasm modules are developed in GoLang and compiled with TinyGo \ud83d\udc9c (with the WASI specification)</li> </ul>"},{"location":"#host-dk-module-dk","title":"Host DK &amp; Module DK","text":"<ul> <li>The Capsule applications are developed thanks to the Capsule Host SDK (HDK)</li> <li>The Capsule modules executed by the The Capsule applications are developed thanks to the Capsule Module SDK (MDK)</li> </ul> <p>\ud83c\udf89 That means, since now, it's possible to develop various runners thanks to the Capsule Host SDK</p> <p>Tutorials are coming soon!</p>"},{"location":"#what-does-a-wasm-capsule-module-look-like","title":"What does a WASM Capsule module look like?","text":""},{"location":"#wasm-module-for-the-capsule-cli","title":"WASM Module for the Capsule CLI","text":"<pre><code>package main\nimport (\ncapsule \"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandle(Handle)\n}\n// Handle function\nfunc Handle(params []byte) ([]byte, error) {\ncapsule.Print(\"Environment variable \u2192 MESSAGE: \" + capsule.GetEnv(\"MESSAGE\"))\nerr := capsule.WriteFile(\"./hello.txt\", []byte(\"\ud83d\udc4b Hello World! \ud83c\udf0d\"))\nif err != nil {\ncapsule.Print(err.Error())\n}\ndata, err := capsule.ReadFile(\"./hello.txt\")\nif err != nil {\ncapsule.Print(err.Error())\n}\ncapsule.Print(\"\ud83d\udcdd: \" + string(data))\nreturn []byte(\"\ud83d\udc4b Hello \" + string(params)), nil\n}\n</code></pre>"},{"location":"#wasm-module-for-the-capsule-http-server","title":"WASM Module for the Capsule HTTP server","text":"<pre><code>// Package main\npackage main\nimport (\n\"strconv\"\n\"github.com/bots-garden/capsule-module-sdk\"\n\"github.com/valyala/fastjson\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(Handle)\n}\n// Handle function \nfunc Handle(param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\ncapsule.Print(\"\ud83d\udcdd: \" + param.Body)\ncapsule.Print(\"\ud83d\udd20: \" + param.Method)\ncapsule.Print(\"\ud83c\udf0d: \" + param.URI)\ncapsule.Print(\"\ud83d\udc52: \" + param.Headers)\nvar p fastjson.Parser\nv, err := p.Parse(param.Body)\nif err != nil {\ncapsule.Log(err.Error())\n}\nmessage := string(v.GetStringBytes(\"name\")) + \" \" + strconv.Itoa(v.GetInt(\"age\"))\ncapsule.Log(message)\nresponse := capsule.HTTPResponse{\nJSONBody: `{\"message\": \"`+message+`\", \"things\":{\"emoji\":\"\ud83d\udc2f\"}}`,\nHeaders: `{\"Content-Type\": \"application/json; charset=utf-8\"}`,\nStatusCode: 200,\n}\nreturn response, nil\n}\n</code></pre>"},{"location":"#what-are-the-added-values-of-capsule","title":"What are the added values of Capsule?","text":"<p>Capsule applications bring superpowers to the WASM modules with host functions. Thanks to these host functions, a WASM function can, for example, prints a message, reads files, writes to files, makes HTTP requests, ... See the host functions section.</p> <p>Useful information for this project</p> <ul> <li>\ud83d\udd90 Issues: https://github.com/bots-garden/capsule/issues</li> <li>\ud83d\udea7 Milestones: https://github.com/bots-garden/capsule/milestones</li> <li>\ud83d\udce6 Releases: https://github.com/bots-garden/capsule/releases</li> </ul>"},{"location":"getting-started-cli/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-cli/#use-the-capsule-cli","title":"Use the Capsule CLI","text":"<p>First, download the last version of the Capsule CLI for the appropriate OS &amp; ARCH:</p> <pre><code>VERSION=\"v0.3.4\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-${VERSION}-${OS}-${ARCH}\nchmod +x capsule\n</code></pre>"},{"location":"getting-started-cli/#run-a-wasm-capsule-module","title":"Run a WASM Capsule module","text":"<p>To run a WASM Capsule module you need to set 2 flags:</p> <ul> <li><code>--wasm</code>: the path to the WASM module</li> <li><code>--params</code>: the parameter to pass to the WASM module</li> </ul> <pre><code>./capsule \\\n--wasm=./functions/hello/hello.wasm \\\n--params=\"Hello World\"\n</code></pre> <p>You can remotely download  the WASM module with the <code>--url</code> flag: <pre><code>./capsule \\\n--url=http://localhost:5000/hello-world.wasm \\\n--wasm=./tmp/hello-world.wasm </code></pre></p>"},{"location":"getting-started-cli/#develop-a-wasm-capsule-module","title":"Develop a WASM Capsule module","text":"<p>Have a look to these samples:</p> <ul> <li>Capsule MDK documentation: first CLI module</li> <li>capsule-cli/functions</li> <li>Samples of the Capsule MDK</li> </ul>"},{"location":"getting-started-http/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started-http/#use-the-capsule-http-server","title":"Use the Capsule HTTP server","text":"<p>First, download the last version of the Capsule HTTP server for the appropriate OS &amp; ARCH:</p> <pre><code>VERSION=\"v0.3.4\" OS=\"linux\" ARCH=\"arm64\"\nwget -O capsule-http https://github.com/bots-garden/capsule/releases/download/${VERSION}/capsule-http-${VERSION}-${OS}-${ARCH}\nchmod +x capsule-http\n</code></pre>"},{"location":"getting-started-http/#serve-a-wasm-capsule-module","title":"Serve a WASM Capsule module","text":"<p>To run a WASM Capsule module you need to set 2 flags:</p> <ul> <li><code>--wasm</code>: the path to the WASM module</li> <li><code>--params</code>: the parameter to pass to the WASM module</li> </ul> <pre><code>./capsule-http \\\n--wasm=./functions/hello-world/hello-world.wasm\\\n--httpPort=8080\n</code></pre> <p>You can query the service like this: <pre><code>curl -X POST http://localhost:8080 \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d '{\"name\":\"Bob Morane\",\"age\":42}'\n</code></pre></p> <p>You can remotely download  the WASM module with the <code>--url</code> flag: <pre><code>./capsule-http \\\n--url=http://localhost:5000/hello-world.wasm \\\n--wasm=./tmp/hello-world.wasm --httpPort=8080\n</code></pre></p>"},{"location":"getting-started-http/#develop-a-wasm-capsule-module","title":"Develop a WASM Capsule module","text":"<p>Have a look to these samples:</p> <ul> <li>Capsule MDK documentation: first HTTP module</li> <li>capsule-http/functions</li> <li>Samples of the Capsule MDK</li> </ul>"},{"location":"host-functions-intro/","title":"Host functions","text":"<p>\ud83d\udea7 this is a work in progress, each host function will be detailed with samples.</p> <p>The Capsule applications (and the Capsule HDK) offer some capabilities to the wasm modules by providing some \"host functions\".</p>"}]}